// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ss_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ss_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ss_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ss_5fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_5fbase_2eproto;
namespace pb {
class s2s_client_session_ping;
struct s2s_client_session_pingDefaultTypeInternal;
extern s2s_client_session_pingDefaultTypeInternal _s2s_client_session_ping_default_instance_;
class s2s_client_session_pong;
struct s2s_client_session_pongDefaultTypeInternal;
extern s2s_client_session_pongDefaultTypeInternal _s2s_client_session_pong_default_instance_;
class s2s_server_session_ping;
struct s2s_server_session_pingDefaultTypeInternal;
extern s2s_server_session_pingDefaultTypeInternal _s2s_server_session_ping_default_instance_;
class s2s_server_session_pong;
struct s2s_server_session_pongDefaultTypeInternal;
extern s2s_server_session_pongDefaultTypeInternal _s2s_server_session_pong_default_instance_;
class s2s_server_session_veriry_ack;
struct s2s_server_session_veriry_ackDefaultTypeInternal;
extern s2s_server_session_veriry_ackDefaultTypeInternal _s2s_server_session_veriry_ack_default_instance_;
class s2s_server_session_veriry_req;
struct s2s_server_session_veriry_reqDefaultTypeInternal;
extern s2s_server_session_veriry_reqDefaultTypeInternal _s2s_server_session_veriry_req_default_instance_;
class sd_conn_attr;
struct sd_conn_attrDefaultTypeInternal;
extern sd_conn_attrDefaultTypeInternal _sd_conn_attr_default_instance_;
class service_discovery;
struct service_discoveryDefaultTypeInternal;
extern service_discoveryDefaultTypeInternal _service_discovery_default_instance_;
class service_discovery_ack;
struct service_discovery_ackDefaultTypeInternal;
extern service_discovery_ackDefaultTypeInternal _service_discovery_ack_default_instance_;
class service_discovery_req;
struct service_discovery_reqDefaultTypeInternal;
extern service_discovery_reqDefaultTypeInternal _service_discovery_req_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::s2s_client_session_ping* Arena::CreateMaybeMessage<::pb::s2s_client_session_ping>(Arena*);
template<> ::pb::s2s_client_session_pong* Arena::CreateMaybeMessage<::pb::s2s_client_session_pong>(Arena*);
template<> ::pb::s2s_server_session_ping* Arena::CreateMaybeMessage<::pb::s2s_server_session_ping>(Arena*);
template<> ::pb::s2s_server_session_pong* Arena::CreateMaybeMessage<::pb::s2s_server_session_pong>(Arena*);
template<> ::pb::s2s_server_session_veriry_ack* Arena::CreateMaybeMessage<::pb::s2s_server_session_veriry_ack>(Arena*);
template<> ::pb::s2s_server_session_veriry_req* Arena::CreateMaybeMessage<::pb::s2s_server_session_veriry_req>(Arena*);
template<> ::pb::sd_conn_attr* Arena::CreateMaybeMessage<::pb::sd_conn_attr>(Arena*);
template<> ::pb::service_discovery* Arena::CreateMaybeMessage<::pb::service_discovery>(Arena*);
template<> ::pb::service_discovery_ack* Arena::CreateMaybeMessage<::pb::service_discovery_ack>(Arena*);
template<> ::pb::service_discovery_req* Arena::CreateMaybeMessage<::pb::service_discovery_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum S2SBaseMsgId : int {
  s2s_base_min_msg_id = 0,
  s2s_server_session_veriry_req_id = 1,
  s2s_server_session_veriry_ack_id = 2,
  s2s_server_session_ping_id = 3,
  s2s_server_session_pong_id = 4,
  s2s_client_session_ping_id = 5,
  s2s_client_session_pong_id = 6,
  service_discovery_req_id = 7,
  service_discovery_ack_id = 8,
  s2s_base_max_msg_id = 299,
  S2SBaseMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  S2SBaseMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool S2SBaseMsgId_IsValid(int value);
constexpr S2SBaseMsgId S2SBaseMsgId_MIN = s2s_base_min_msg_id;
constexpr S2SBaseMsgId S2SBaseMsgId_MAX = s2s_base_max_msg_id;
constexpr int S2SBaseMsgId_ARRAYSIZE = S2SBaseMsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S2SBaseMsgId_descriptor();
template<typename T>
inline const std::string& S2SBaseMsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S2SBaseMsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S2SBaseMsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S2SBaseMsgId_descriptor(), enum_t_value);
}
inline bool S2SBaseMsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S2SBaseMsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S2SBaseMsgId>(
    S2SBaseMsgId_descriptor(), name, value);
}
// ===================================================================

class s2s_server_session_veriry_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.s2s_server_session_veriry_req) */ {
 public:
  inline s2s_server_session_veriry_req() : s2s_server_session_veriry_req(nullptr) {}
  ~s2s_server_session_veriry_req() override;
  explicit constexpr s2s_server_session_veriry_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2s_server_session_veriry_req(const s2s_server_session_veriry_req& from);
  s2s_server_session_veriry_req(s2s_server_session_veriry_req&& from) noexcept
    : s2s_server_session_veriry_req() {
    *this = ::std::move(from);
  }

  inline s2s_server_session_veriry_req& operator=(const s2s_server_session_veriry_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2s_server_session_veriry_req& operator=(s2s_server_session_veriry_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2s_server_session_veriry_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2s_server_session_veriry_req* internal_default_instance() {
    return reinterpret_cast<const s2s_server_session_veriry_req*>(
               &_s2s_server_session_veriry_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(s2s_server_session_veriry_req& a, s2s_server_session_veriry_req& b) {
    a.Swap(&b);
  }
  inline void Swap(s2s_server_session_veriry_req* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2s_server_session_veriry_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s2s_server_session_veriry_req* New() const final {
    return new s2s_server_session_veriry_req();
  }

  s2s_server_session_veriry_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s2s_server_session_veriry_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2s_server_session_veriry_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const s2s_server_session_veriry_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2s_server_session_veriry_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.s2s_server_session_veriry_req";
  }
  protected:
  explicit s2s_server_session_veriry_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTypeStrFieldNumber = 3,
    kIpFieldNumber = 4,
    kTokenFieldNumber = 5,
    kServerIdFieldNumber = 1,
    kServerTypeFieldNumber = 2,
  };
  // string server_type_str = 3;
  void clear_server_type_str();
  const std::string& server_type_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_type_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_type_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_type_str();
  void set_allocated_server_type_str(std::string* server_type_str);
  private:
  const std::string& _internal_server_type_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_type_str(const std::string& value);
  std::string* _internal_mutable_server_type_str();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string token = 5;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 server_type = 2;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_type() const;
  void _internal_set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.s2s_server_session_veriry_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_type_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class s2s_server_session_veriry_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.s2s_server_session_veriry_ack) */ {
 public:
  inline s2s_server_session_veriry_ack() : s2s_server_session_veriry_ack(nullptr) {}
  ~s2s_server_session_veriry_ack() override;
  explicit constexpr s2s_server_session_veriry_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2s_server_session_veriry_ack(const s2s_server_session_veriry_ack& from);
  s2s_server_session_veriry_ack(s2s_server_session_veriry_ack&& from) noexcept
    : s2s_server_session_veriry_ack() {
    *this = ::std::move(from);
  }

  inline s2s_server_session_veriry_ack& operator=(const s2s_server_session_veriry_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2s_server_session_veriry_ack& operator=(s2s_server_session_veriry_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2s_server_session_veriry_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2s_server_session_veriry_ack* internal_default_instance() {
    return reinterpret_cast<const s2s_server_session_veriry_ack*>(
               &_s2s_server_session_veriry_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(s2s_server_session_veriry_ack& a, s2s_server_session_veriry_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(s2s_server_session_veriry_ack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2s_server_session_veriry_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s2s_server_session_veriry_ack* New() const final {
    return new s2s_server_session_veriry_ack();
  }

  s2s_server_session_veriry_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s2s_server_session_veriry_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2s_server_session_veriry_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const s2s_server_session_veriry_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2s_server_session_veriry_ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.s2s_server_session_veriry_ack";
  }
  protected:
  explicit s2s_server_session_veriry_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.s2s_server_session_veriry_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class s2s_server_session_ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.s2s_server_session_ping) */ {
 public:
  inline s2s_server_session_ping() : s2s_server_session_ping(nullptr) {}
  ~s2s_server_session_ping() override;
  explicit constexpr s2s_server_session_ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2s_server_session_ping(const s2s_server_session_ping& from);
  s2s_server_session_ping(s2s_server_session_ping&& from) noexcept
    : s2s_server_session_ping() {
    *this = ::std::move(from);
  }

  inline s2s_server_session_ping& operator=(const s2s_server_session_ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2s_server_session_ping& operator=(s2s_server_session_ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2s_server_session_ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2s_server_session_ping* internal_default_instance() {
    return reinterpret_cast<const s2s_server_session_ping*>(
               &_s2s_server_session_ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(s2s_server_session_ping& a, s2s_server_session_ping& b) {
    a.Swap(&b);
  }
  inline void Swap(s2s_server_session_ping* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2s_server_session_ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s2s_server_session_ping* New() const final {
    return new s2s_server_session_ping();
  }

  s2s_server_session_ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s2s_server_session_ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2s_server_session_ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const s2s_server_session_ping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2s_server_session_ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.s2s_server_session_ping";
  }
  protected:
  explicit s2s_server_session_ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.s2s_server_session_ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class s2s_server_session_pong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.s2s_server_session_pong) */ {
 public:
  inline s2s_server_session_pong() : s2s_server_session_pong(nullptr) {}
  ~s2s_server_session_pong() override;
  explicit constexpr s2s_server_session_pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2s_server_session_pong(const s2s_server_session_pong& from);
  s2s_server_session_pong(s2s_server_session_pong&& from) noexcept
    : s2s_server_session_pong() {
    *this = ::std::move(from);
  }

  inline s2s_server_session_pong& operator=(const s2s_server_session_pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2s_server_session_pong& operator=(s2s_server_session_pong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2s_server_session_pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2s_server_session_pong* internal_default_instance() {
    return reinterpret_cast<const s2s_server_session_pong*>(
               &_s2s_server_session_pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(s2s_server_session_pong& a, s2s_server_session_pong& b) {
    a.Swap(&b);
  }
  inline void Swap(s2s_server_session_pong* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2s_server_session_pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s2s_server_session_pong* New() const final {
    return new s2s_server_session_pong();
  }

  s2s_server_session_pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s2s_server_session_pong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2s_server_session_pong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const s2s_server_session_pong& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2s_server_session_pong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.s2s_server_session_pong";
  }
  protected:
  explicit s2s_server_session_pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.s2s_server_session_pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class s2s_client_session_ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.s2s_client_session_ping) */ {
 public:
  inline s2s_client_session_ping() : s2s_client_session_ping(nullptr) {}
  ~s2s_client_session_ping() override;
  explicit constexpr s2s_client_session_ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2s_client_session_ping(const s2s_client_session_ping& from);
  s2s_client_session_ping(s2s_client_session_ping&& from) noexcept
    : s2s_client_session_ping() {
    *this = ::std::move(from);
  }

  inline s2s_client_session_ping& operator=(const s2s_client_session_ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2s_client_session_ping& operator=(s2s_client_session_ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2s_client_session_ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2s_client_session_ping* internal_default_instance() {
    return reinterpret_cast<const s2s_client_session_ping*>(
               &_s2s_client_session_ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(s2s_client_session_ping& a, s2s_client_session_ping& b) {
    a.Swap(&b);
  }
  inline void Swap(s2s_client_session_ping* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2s_client_session_ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s2s_client_session_ping* New() const final {
    return new s2s_client_session_ping();
  }

  s2s_client_session_ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s2s_client_session_ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2s_client_session_ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const s2s_client_session_ping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2s_client_session_ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.s2s_client_session_ping";
  }
  protected:
  explicit s2s_client_session_ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.s2s_client_session_ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class s2s_client_session_pong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.s2s_client_session_pong) */ {
 public:
  inline s2s_client_session_pong() : s2s_client_session_pong(nullptr) {}
  ~s2s_client_session_pong() override;
  explicit constexpr s2s_client_session_pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  s2s_client_session_pong(const s2s_client_session_pong& from);
  s2s_client_session_pong(s2s_client_session_pong&& from) noexcept
    : s2s_client_session_pong() {
    *this = ::std::move(from);
  }

  inline s2s_client_session_pong& operator=(const s2s_client_session_pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline s2s_client_session_pong& operator=(s2s_client_session_pong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const s2s_client_session_pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const s2s_client_session_pong* internal_default_instance() {
    return reinterpret_cast<const s2s_client_session_pong*>(
               &_s2s_client_session_pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(s2s_client_session_pong& a, s2s_client_session_pong& b) {
    a.Swap(&b);
  }
  inline void Swap(s2s_client_session_pong* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(s2s_client_session_pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline s2s_client_session_pong* New() const final {
    return new s2s_client_session_pong();
  }

  s2s_client_session_pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<s2s_client_session_pong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const s2s_client_session_pong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const s2s_client_session_pong& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(s2s_client_session_pong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.s2s_client_session_pong";
  }
  protected:
  explicit s2s_client_session_pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.s2s_client_session_pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class sd_conn_attr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.sd_conn_attr) */ {
 public:
  inline sd_conn_attr() : sd_conn_attr(nullptr) {}
  ~sd_conn_attr() override;
  explicit constexpr sd_conn_attr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sd_conn_attr(const sd_conn_attr& from);
  sd_conn_attr(sd_conn_attr&& from) noexcept
    : sd_conn_attr() {
    *this = ::std::move(from);
  }

  inline sd_conn_attr& operator=(const sd_conn_attr& from) {
    CopyFrom(from);
    return *this;
  }
  inline sd_conn_attr& operator=(sd_conn_attr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sd_conn_attr& default_instance() {
    return *internal_default_instance();
  }
  static inline const sd_conn_attr* internal_default_instance() {
    return reinterpret_cast<const sd_conn_attr*>(
               &_sd_conn_attr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(sd_conn_attr& a, sd_conn_attr& b) {
    a.Swap(&b);
  }
  inline void Swap(sd_conn_attr* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sd_conn_attr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sd_conn_attr* New() const final {
    return new sd_conn_attr();
  }

  sd_conn_attr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sd_conn_attr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sd_conn_attr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sd_conn_attr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sd_conn_attr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.sd_conn_attr";
  }
  protected:
  explicit sd_conn_attr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTypeStrFieldNumber = 3,
    kInterFieldNumber = 4,
    kOuterFieldNumber = 5,
    kTokenFieldNumber = 6,
    kServerIdFieldNumber = 1,
    kServerTypeFieldNumber = 2,
  };
  // string server_type_str = 3;
  void clear_server_type_str();
  const std::string& server_type_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_type_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_type_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_type_str();
  void set_allocated_server_type_str(std::string* server_type_str);
  private:
  const std::string& _internal_server_type_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_type_str(const std::string& value);
  std::string* _internal_mutable_server_type_str();
  public:

  // string inter = 4;
  void clear_inter();
  const std::string& inter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inter();
  PROTOBUF_MUST_USE_RESULT std::string* release_inter();
  void set_allocated_inter(std::string* inter);
  private:
  const std::string& _internal_inter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inter(const std::string& value);
  std::string* _internal_mutable_inter();
  public:

  // string outer = 5;
  void clear_outer();
  const std::string& outer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outer();
  PROTOBUF_MUST_USE_RESULT std::string* release_outer();
  void set_allocated_outer(std::string* outer);
  private:
  const std::string& _internal_outer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outer(const std::string& value);
  std::string* _internal_mutable_outer();
  public:

  // string token = 6;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 server_type = 2;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_type() const;
  void _internal_set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.sd_conn_attr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_type_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class service_discovery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.service_discovery) */ {
 public:
  inline service_discovery() : service_discovery(nullptr) {}
  ~service_discovery() override;
  explicit constexpr service_discovery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  service_discovery(const service_discovery& from);
  service_discovery(service_discovery&& from) noexcept
    : service_discovery() {
    *this = ::std::move(from);
  }

  inline service_discovery& operator=(const service_discovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline service_discovery& operator=(service_discovery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const service_discovery& default_instance() {
    return *internal_default_instance();
  }
  static inline const service_discovery* internal_default_instance() {
    return reinterpret_cast<const service_discovery*>(
               &_service_discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(service_discovery& a, service_discovery& b) {
    a.Swap(&b);
  }
  inline void Swap(service_discovery* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(service_discovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline service_discovery* New() const final {
    return new service_discovery();
  }

  service_discovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<service_discovery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const service_discovery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const service_discovery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(service_discovery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.service_discovery";
  }
  protected:
  explicit service_discovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnListFieldNumber = 7,
    kS2SInterListenFieldNumber = 2,
    kS2SOuterListenFieldNumber = 3,
    kS2SHttpSurlFieldNumber = 4,
    kS2SHttpCurl1FieldNumber = 5,
    kS2SHttpCurl2FieldNumber = 6,
    kC2SInterListenFieldNumber = 8,
    kC2SOuterListenFieldNumber = 9,
    kC2SHttpsUrlFieldNumber = 10,
    kC2SHttpsCertFieldNumber = 11,
    kC2SHttpsKeyFieldNumber = 12,
    kSdkTcpInterFieldNumber = 13,
    kSdkTcpOutFieldNumber = 14,
    kSdkHttpsUrtlFieldNumber = 15,
    kSdkHttpsCertFieldNumber = 16,
    kSdkHttpsKeyFieldNumber = 17,
    kServerIdFieldNumber = 1,
  };
  // repeated .pb.sd_conn_attr conn_list = 7;
  int conn_list_size() const;
  private:
  int _internal_conn_list_size() const;
  public:
  void clear_conn_list();
  ::pb::sd_conn_attr* mutable_conn_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::sd_conn_attr >*
      mutable_conn_list();
  private:
  const ::pb::sd_conn_attr& _internal_conn_list(int index) const;
  ::pb::sd_conn_attr* _internal_add_conn_list();
  public:
  const ::pb::sd_conn_attr& conn_list(int index) const;
  ::pb::sd_conn_attr* add_conn_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::sd_conn_attr >&
      conn_list() const;

  // string s2s_inter_listen = 2;
  void clear_s2s_inter_listen();
  const std::string& s2s_inter_listen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2s_inter_listen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2s_inter_listen();
  PROTOBUF_MUST_USE_RESULT std::string* release_s2s_inter_listen();
  void set_allocated_s2s_inter_listen(std::string* s2s_inter_listen);
  private:
  const std::string& _internal_s2s_inter_listen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2s_inter_listen(const std::string& value);
  std::string* _internal_mutable_s2s_inter_listen();
  public:

  // string s2s_outer_listen = 3;
  void clear_s2s_outer_listen();
  const std::string& s2s_outer_listen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2s_outer_listen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2s_outer_listen();
  PROTOBUF_MUST_USE_RESULT std::string* release_s2s_outer_listen();
  void set_allocated_s2s_outer_listen(std::string* s2s_outer_listen);
  private:
  const std::string& _internal_s2s_outer_listen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2s_outer_listen(const std::string& value);
  std::string* _internal_mutable_s2s_outer_listen();
  public:

  // string s2s_http_surl = 4;
  void clear_s2s_http_surl();
  const std::string& s2s_http_surl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2s_http_surl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2s_http_surl();
  PROTOBUF_MUST_USE_RESULT std::string* release_s2s_http_surl();
  void set_allocated_s2s_http_surl(std::string* s2s_http_surl);
  private:
  const std::string& _internal_s2s_http_surl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2s_http_surl(const std::string& value);
  std::string* _internal_mutable_s2s_http_surl();
  public:

  // string s2s_http_curl1 = 5;
  void clear_s2s_http_curl1();
  const std::string& s2s_http_curl1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2s_http_curl1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2s_http_curl1();
  PROTOBUF_MUST_USE_RESULT std::string* release_s2s_http_curl1();
  void set_allocated_s2s_http_curl1(std::string* s2s_http_curl1);
  private:
  const std::string& _internal_s2s_http_curl1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2s_http_curl1(const std::string& value);
  std::string* _internal_mutable_s2s_http_curl1();
  public:

  // string s2s_http_curl2 = 6;
  void clear_s2s_http_curl2();
  const std::string& s2s_http_curl2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s2s_http_curl2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s2s_http_curl2();
  PROTOBUF_MUST_USE_RESULT std::string* release_s2s_http_curl2();
  void set_allocated_s2s_http_curl2(std::string* s2s_http_curl2);
  private:
  const std::string& _internal_s2s_http_curl2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s2s_http_curl2(const std::string& value);
  std::string* _internal_mutable_s2s_http_curl2();
  public:

  // string c2s_inter_listen = 8;
  void clear_c2s_inter_listen();
  const std::string& c2s_inter_listen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c2s_inter_listen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c2s_inter_listen();
  PROTOBUF_MUST_USE_RESULT std::string* release_c2s_inter_listen();
  void set_allocated_c2s_inter_listen(std::string* c2s_inter_listen);
  private:
  const std::string& _internal_c2s_inter_listen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c2s_inter_listen(const std::string& value);
  std::string* _internal_mutable_c2s_inter_listen();
  public:

  // string c2s_outer_listen = 9;
  void clear_c2s_outer_listen();
  const std::string& c2s_outer_listen() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c2s_outer_listen(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c2s_outer_listen();
  PROTOBUF_MUST_USE_RESULT std::string* release_c2s_outer_listen();
  void set_allocated_c2s_outer_listen(std::string* c2s_outer_listen);
  private:
  const std::string& _internal_c2s_outer_listen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c2s_outer_listen(const std::string& value);
  std::string* _internal_mutable_c2s_outer_listen();
  public:

  // string c2s_https_url = 10;
  void clear_c2s_https_url();
  const std::string& c2s_https_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c2s_https_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c2s_https_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_c2s_https_url();
  void set_allocated_c2s_https_url(std::string* c2s_https_url);
  private:
  const std::string& _internal_c2s_https_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c2s_https_url(const std::string& value);
  std::string* _internal_mutable_c2s_https_url();
  public:

  // string c2s_https_cert = 11;
  void clear_c2s_https_cert();
  const std::string& c2s_https_cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c2s_https_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c2s_https_cert();
  PROTOBUF_MUST_USE_RESULT std::string* release_c2s_https_cert();
  void set_allocated_c2s_https_cert(std::string* c2s_https_cert);
  private:
  const std::string& _internal_c2s_https_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c2s_https_cert(const std::string& value);
  std::string* _internal_mutable_c2s_https_cert();
  public:

  // string c2s_https_key = 12;
  void clear_c2s_https_key();
  const std::string& c2s_https_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c2s_https_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c2s_https_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_c2s_https_key();
  void set_allocated_c2s_https_key(std::string* c2s_https_key);
  private:
  const std::string& _internal_c2s_https_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c2s_https_key(const std::string& value);
  std::string* _internal_mutable_c2s_https_key();
  public:

  // string sdk_tcp_inter = 13;
  void clear_sdk_tcp_inter();
  const std::string& sdk_tcp_inter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_tcp_inter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_tcp_inter();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk_tcp_inter();
  void set_allocated_sdk_tcp_inter(std::string* sdk_tcp_inter);
  private:
  const std::string& _internal_sdk_tcp_inter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_tcp_inter(const std::string& value);
  std::string* _internal_mutable_sdk_tcp_inter();
  public:

  // string sdk_tcp_out = 14;
  void clear_sdk_tcp_out();
  const std::string& sdk_tcp_out() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_tcp_out(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_tcp_out();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk_tcp_out();
  void set_allocated_sdk_tcp_out(std::string* sdk_tcp_out);
  private:
  const std::string& _internal_sdk_tcp_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_tcp_out(const std::string& value);
  std::string* _internal_mutable_sdk_tcp_out();
  public:

  // string sdk_https_urtl = 15;
  void clear_sdk_https_urtl();
  const std::string& sdk_https_urtl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_https_urtl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_https_urtl();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk_https_urtl();
  void set_allocated_sdk_https_urtl(std::string* sdk_https_urtl);
  private:
  const std::string& _internal_sdk_https_urtl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_https_urtl(const std::string& value);
  std::string* _internal_mutable_sdk_https_urtl();
  public:

  // string sdk_https_cert = 16;
  void clear_sdk_https_cert();
  const std::string& sdk_https_cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_https_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_https_cert();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk_https_cert();
  void set_allocated_sdk_https_cert(std::string* sdk_https_cert);
  private:
  const std::string& _internal_sdk_https_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_https_cert(const std::string& value);
  std::string* _internal_mutable_sdk_https_cert();
  public:

  // string sdk_https_key = 17;
  void clear_sdk_https_key();
  const std::string& sdk_https_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_https_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_https_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk_https_key();
  void set_allocated_sdk_https_key(std::string* sdk_https_key);
  private:
  const std::string& _internal_sdk_https_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_https_key(const std::string& value);
  std::string* _internal_mutable_sdk_https_key();
  public:

  // uint64 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.service_discovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::sd_conn_attr > conn_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2s_inter_listen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2s_outer_listen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2s_http_surl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2s_http_curl1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s2s_http_curl2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c2s_inter_listen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c2s_outer_listen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c2s_https_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c2s_https_cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c2s_https_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_tcp_inter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_tcp_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_https_urtl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_https_cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_https_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class service_discovery_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.service_discovery_req) */ {
 public:
  inline service_discovery_req() : service_discovery_req(nullptr) {}
  ~service_discovery_req() override;
  explicit constexpr service_discovery_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  service_discovery_req(const service_discovery_req& from);
  service_discovery_req(service_discovery_req&& from) noexcept
    : service_discovery_req() {
    *this = ::std::move(from);
  }

  inline service_discovery_req& operator=(const service_discovery_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline service_discovery_req& operator=(service_discovery_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const service_discovery_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const service_discovery_req* internal_default_instance() {
    return reinterpret_cast<const service_discovery_req*>(
               &_service_discovery_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(service_discovery_req& a, service_discovery_req& b) {
    a.Swap(&b);
  }
  inline void Swap(service_discovery_req* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(service_discovery_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline service_discovery_req* New() const final {
    return new service_discovery_req();
  }

  service_discovery_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<service_discovery_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const service_discovery_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const service_discovery_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(service_discovery_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.service_discovery_req";
  }
  protected:
  explicit service_discovery_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.service_discovery_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// -------------------------------------------------------------------

class service_discovery_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.service_discovery_ack) */ {
 public:
  inline service_discovery_ack() : service_discovery_ack(nullptr) {}
  ~service_discovery_ack() override;
  explicit constexpr service_discovery_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  service_discovery_ack(const service_discovery_ack& from);
  service_discovery_ack(service_discovery_ack&& from) noexcept
    : service_discovery_ack() {
    *this = ::std::move(from);
  }

  inline service_discovery_ack& operator=(const service_discovery_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline service_discovery_ack& operator=(service_discovery_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const service_discovery_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const service_discovery_ack* internal_default_instance() {
    return reinterpret_cast<const service_discovery_ack*>(
               &_service_discovery_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(service_discovery_ack& a, service_discovery_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(service_discovery_ack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(service_discovery_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline service_discovery_ack* New() const final {
    return new service_discovery_ack();
  }

  service_discovery_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<service_discovery_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const service_discovery_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const service_discovery_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(service_discovery_ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.service_discovery_ack";
  }
  protected:
  explicit service_discovery_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdInfoFieldNumber = 3,
    kRebuildFlagFieldNumber = 1,
    kVerifyFlagFieldNumber = 2,
  };
  // .pb.service_discovery sd_info = 3;
  bool has_sd_info() const;
  private:
  bool _internal_has_sd_info() const;
  public:
  void clear_sd_info();
  const ::pb::service_discovery& sd_info() const;
  PROTOBUF_MUST_USE_RESULT ::pb::service_discovery* release_sd_info();
  ::pb::service_discovery* mutable_sd_info();
  void set_allocated_sd_info(::pb::service_discovery* sd_info);
  private:
  const ::pb::service_discovery& _internal_sd_info() const;
  ::pb::service_discovery* _internal_mutable_sd_info();
  public:
  void unsafe_arena_set_allocated_sd_info(
      ::pb::service_discovery* sd_info);
  ::pb::service_discovery* unsafe_arena_release_sd_info();

  // bool rebuild_flag = 1;
  void clear_rebuild_flag();
  bool rebuild_flag() const;
  void set_rebuild_flag(bool value);
  private:
  bool _internal_rebuild_flag() const;
  void _internal_set_rebuild_flag(bool value);
  public:

  // bool verify_flag = 2;
  void clear_verify_flag();
  bool verify_flag() const;
  void set_verify_flag(bool value);
  private:
  bool _internal_verify_flag() const;
  void _internal_set_verify_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.service_discovery_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pb::service_discovery* sd_info_;
  bool rebuild_flag_;
  bool verify_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ss_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// s2s_server_session_veriry_req

// uint64 server_id = 1;
inline void s2s_server_session_veriry_req::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 s2s_server_session_veriry_req::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 s2s_server_session_veriry_req::server_id() const {
  // @@protoc_insertion_point(field_get:pb.s2s_server_session_veriry_req.server_id)
  return _internal_server_id();
}
inline void s2s_server_session_veriry_req::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void s2s_server_session_veriry_req::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:pb.s2s_server_session_veriry_req.server_id)
}

// uint32 server_type = 2;
inline void s2s_server_session_veriry_req::clear_server_type() {
  server_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 s2s_server_session_veriry_req::_internal_server_type() const {
  return server_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 s2s_server_session_veriry_req::server_type() const {
  // @@protoc_insertion_point(field_get:pb.s2s_server_session_veriry_req.server_type)
  return _internal_server_type();
}
inline void s2s_server_session_veriry_req::_internal_set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_type_ = value;
}
inline void s2s_server_session_veriry_req::set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:pb.s2s_server_session_veriry_req.server_type)
}

// string server_type_str = 3;
inline void s2s_server_session_veriry_req::clear_server_type_str() {
  server_type_str_.ClearToEmpty();
}
inline const std::string& s2s_server_session_veriry_req::server_type_str() const {
  // @@protoc_insertion_point(field_get:pb.s2s_server_session_veriry_req.server_type_str)
  return _internal_server_type_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2s_server_session_veriry_req::set_server_type_str(ArgT0&& arg0, ArgT... args) {
 
 server_type_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.s2s_server_session_veriry_req.server_type_str)
}
inline std::string* s2s_server_session_veriry_req::mutable_server_type_str() {
  std::string* _s = _internal_mutable_server_type_str();
  // @@protoc_insertion_point(field_mutable:pb.s2s_server_session_veriry_req.server_type_str)
  return _s;
}
inline const std::string& s2s_server_session_veriry_req::_internal_server_type_str() const {
  return server_type_str_.Get();
}
inline void s2s_server_session_veriry_req::_internal_set_server_type_str(const std::string& value) {
  
  server_type_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* s2s_server_session_veriry_req::_internal_mutable_server_type_str() {
  
  return server_type_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* s2s_server_session_veriry_req::release_server_type_str() {
  // @@protoc_insertion_point(field_release:pb.s2s_server_session_veriry_req.server_type_str)
  return server_type_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void s2s_server_session_veriry_req::set_allocated_server_type_str(std::string* server_type_str) {
  if (server_type_str != nullptr) {
    
  } else {
    
  }
  server_type_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_type_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.s2s_server_session_veriry_req.server_type_str)
}

// string ip = 4;
inline void s2s_server_session_veriry_req::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& s2s_server_session_veriry_req::ip() const {
  // @@protoc_insertion_point(field_get:pb.s2s_server_session_veriry_req.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2s_server_session_veriry_req::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.s2s_server_session_veriry_req.ip)
}
inline std::string* s2s_server_session_veriry_req::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:pb.s2s_server_session_veriry_req.ip)
  return _s;
}
inline const std::string& s2s_server_session_veriry_req::_internal_ip() const {
  return ip_.Get();
}
inline void s2s_server_session_veriry_req::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* s2s_server_session_veriry_req::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* s2s_server_session_veriry_req::release_ip() {
  // @@protoc_insertion_point(field_release:pb.s2s_server_session_veriry_req.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void s2s_server_session_veriry_req::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.s2s_server_session_veriry_req.ip)
}

// string token = 5;
inline void s2s_server_session_veriry_req::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& s2s_server_session_veriry_req::token() const {
  // @@protoc_insertion_point(field_get:pb.s2s_server_session_veriry_req.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void s2s_server_session_veriry_req::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.s2s_server_session_veriry_req.token)
}
inline std::string* s2s_server_session_veriry_req::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:pb.s2s_server_session_veriry_req.token)
  return _s;
}
inline const std::string& s2s_server_session_veriry_req::_internal_token() const {
  return token_.Get();
}
inline void s2s_server_session_veriry_req::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* s2s_server_session_veriry_req::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* s2s_server_session_veriry_req::release_token() {
  // @@protoc_insertion_point(field_release:pb.s2s_server_session_veriry_req.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void s2s_server_session_veriry_req::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.s2s_server_session_veriry_req.token)
}

// -------------------------------------------------------------------

// s2s_server_session_veriry_ack

// -------------------------------------------------------------------

// s2s_server_session_ping

// -------------------------------------------------------------------

// s2s_server_session_pong

// -------------------------------------------------------------------

// s2s_client_session_ping

// -------------------------------------------------------------------

// s2s_client_session_pong

// -------------------------------------------------------------------

// sd_conn_attr

// uint64 server_id = 1;
inline void sd_conn_attr::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 sd_conn_attr::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 sd_conn_attr::server_id() const {
  // @@protoc_insertion_point(field_get:pb.sd_conn_attr.server_id)
  return _internal_server_id();
}
inline void sd_conn_attr::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void sd_conn_attr::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:pb.sd_conn_attr.server_id)
}

// uint32 server_type = 2;
inline void sd_conn_attr::clear_server_type() {
  server_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sd_conn_attr::_internal_server_type() const {
  return server_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sd_conn_attr::server_type() const {
  // @@protoc_insertion_point(field_get:pb.sd_conn_attr.server_type)
  return _internal_server_type();
}
inline void sd_conn_attr::_internal_set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_type_ = value;
}
inline void sd_conn_attr::set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:pb.sd_conn_attr.server_type)
}

// string server_type_str = 3;
inline void sd_conn_attr::clear_server_type_str() {
  server_type_str_.ClearToEmpty();
}
inline const std::string& sd_conn_attr::server_type_str() const {
  // @@protoc_insertion_point(field_get:pb.sd_conn_attr.server_type_str)
  return _internal_server_type_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sd_conn_attr::set_server_type_str(ArgT0&& arg0, ArgT... args) {
 
 server_type_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.sd_conn_attr.server_type_str)
}
inline std::string* sd_conn_attr::mutable_server_type_str() {
  std::string* _s = _internal_mutable_server_type_str();
  // @@protoc_insertion_point(field_mutable:pb.sd_conn_attr.server_type_str)
  return _s;
}
inline const std::string& sd_conn_attr::_internal_server_type_str() const {
  return server_type_str_.Get();
}
inline void sd_conn_attr::_internal_set_server_type_str(const std::string& value) {
  
  server_type_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::_internal_mutable_server_type_str() {
  
  return server_type_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::release_server_type_str() {
  // @@protoc_insertion_point(field_release:pb.sd_conn_attr.server_type_str)
  return server_type_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sd_conn_attr::set_allocated_server_type_str(std::string* server_type_str) {
  if (server_type_str != nullptr) {
    
  } else {
    
  }
  server_type_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_type_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.sd_conn_attr.server_type_str)
}

// string inter = 4;
inline void sd_conn_attr::clear_inter() {
  inter_.ClearToEmpty();
}
inline const std::string& sd_conn_attr::inter() const {
  // @@protoc_insertion_point(field_get:pb.sd_conn_attr.inter)
  return _internal_inter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sd_conn_attr::set_inter(ArgT0&& arg0, ArgT... args) {
 
 inter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.sd_conn_attr.inter)
}
inline std::string* sd_conn_attr::mutable_inter() {
  std::string* _s = _internal_mutable_inter();
  // @@protoc_insertion_point(field_mutable:pb.sd_conn_attr.inter)
  return _s;
}
inline const std::string& sd_conn_attr::_internal_inter() const {
  return inter_.Get();
}
inline void sd_conn_attr::_internal_set_inter(const std::string& value) {
  
  inter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::_internal_mutable_inter() {
  
  return inter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::release_inter() {
  // @@protoc_insertion_point(field_release:pb.sd_conn_attr.inter)
  return inter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sd_conn_attr::set_allocated_inter(std::string* inter) {
  if (inter != nullptr) {
    
  } else {
    
  }
  inter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.sd_conn_attr.inter)
}

// string outer = 5;
inline void sd_conn_attr::clear_outer() {
  outer_.ClearToEmpty();
}
inline const std::string& sd_conn_attr::outer() const {
  // @@protoc_insertion_point(field_get:pb.sd_conn_attr.outer)
  return _internal_outer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sd_conn_attr::set_outer(ArgT0&& arg0, ArgT... args) {
 
 outer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.sd_conn_attr.outer)
}
inline std::string* sd_conn_attr::mutable_outer() {
  std::string* _s = _internal_mutable_outer();
  // @@protoc_insertion_point(field_mutable:pb.sd_conn_attr.outer)
  return _s;
}
inline const std::string& sd_conn_attr::_internal_outer() const {
  return outer_.Get();
}
inline void sd_conn_attr::_internal_set_outer(const std::string& value) {
  
  outer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::_internal_mutable_outer() {
  
  return outer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::release_outer() {
  // @@protoc_insertion_point(field_release:pb.sd_conn_attr.outer)
  return outer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sd_conn_attr::set_allocated_outer(std::string* outer) {
  if (outer != nullptr) {
    
  } else {
    
  }
  outer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.sd_conn_attr.outer)
}

// string token = 6;
inline void sd_conn_attr::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& sd_conn_attr::token() const {
  // @@protoc_insertion_point(field_get:pb.sd_conn_attr.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void sd_conn_attr::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.sd_conn_attr.token)
}
inline std::string* sd_conn_attr::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:pb.sd_conn_attr.token)
  return _s;
}
inline const std::string& sd_conn_attr::_internal_token() const {
  return token_.Get();
}
inline void sd_conn_attr::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* sd_conn_attr::release_token() {
  // @@protoc_insertion_point(field_release:pb.sd_conn_attr.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void sd_conn_attr::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.sd_conn_attr.token)
}

// -------------------------------------------------------------------

// service_discovery

// uint64 server_id = 1;
inline void service_discovery::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 service_discovery::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 service_discovery::server_id() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.server_id)
  return _internal_server_id();
}
inline void service_discovery::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void service_discovery::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:pb.service_discovery.server_id)
}

// string s2s_inter_listen = 2;
inline void service_discovery::clear_s2s_inter_listen() {
  s2s_inter_listen_.ClearToEmpty();
}
inline const std::string& service_discovery::s2s_inter_listen() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.s2s_inter_listen)
  return _internal_s2s_inter_listen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_s2s_inter_listen(ArgT0&& arg0, ArgT... args) {
 
 s2s_inter_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.s2s_inter_listen)
}
inline std::string* service_discovery::mutable_s2s_inter_listen() {
  std::string* _s = _internal_mutable_s2s_inter_listen();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.s2s_inter_listen)
  return _s;
}
inline const std::string& service_discovery::_internal_s2s_inter_listen() const {
  return s2s_inter_listen_.Get();
}
inline void service_discovery::_internal_set_s2s_inter_listen(const std::string& value) {
  
  s2s_inter_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_s2s_inter_listen() {
  
  return s2s_inter_listen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_s2s_inter_listen() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.s2s_inter_listen)
  return s2s_inter_listen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_s2s_inter_listen(std::string* s2s_inter_listen) {
  if (s2s_inter_listen != nullptr) {
    
  } else {
    
  }
  s2s_inter_listen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s2s_inter_listen,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.s2s_inter_listen)
}

// string s2s_outer_listen = 3;
inline void service_discovery::clear_s2s_outer_listen() {
  s2s_outer_listen_.ClearToEmpty();
}
inline const std::string& service_discovery::s2s_outer_listen() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.s2s_outer_listen)
  return _internal_s2s_outer_listen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_s2s_outer_listen(ArgT0&& arg0, ArgT... args) {
 
 s2s_outer_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.s2s_outer_listen)
}
inline std::string* service_discovery::mutable_s2s_outer_listen() {
  std::string* _s = _internal_mutable_s2s_outer_listen();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.s2s_outer_listen)
  return _s;
}
inline const std::string& service_discovery::_internal_s2s_outer_listen() const {
  return s2s_outer_listen_.Get();
}
inline void service_discovery::_internal_set_s2s_outer_listen(const std::string& value) {
  
  s2s_outer_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_s2s_outer_listen() {
  
  return s2s_outer_listen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_s2s_outer_listen() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.s2s_outer_listen)
  return s2s_outer_listen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_s2s_outer_listen(std::string* s2s_outer_listen) {
  if (s2s_outer_listen != nullptr) {
    
  } else {
    
  }
  s2s_outer_listen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s2s_outer_listen,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.s2s_outer_listen)
}

// string s2s_http_surl = 4;
inline void service_discovery::clear_s2s_http_surl() {
  s2s_http_surl_.ClearToEmpty();
}
inline const std::string& service_discovery::s2s_http_surl() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.s2s_http_surl)
  return _internal_s2s_http_surl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_s2s_http_surl(ArgT0&& arg0, ArgT... args) {
 
 s2s_http_surl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.s2s_http_surl)
}
inline std::string* service_discovery::mutable_s2s_http_surl() {
  std::string* _s = _internal_mutable_s2s_http_surl();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.s2s_http_surl)
  return _s;
}
inline const std::string& service_discovery::_internal_s2s_http_surl() const {
  return s2s_http_surl_.Get();
}
inline void service_discovery::_internal_set_s2s_http_surl(const std::string& value) {
  
  s2s_http_surl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_s2s_http_surl() {
  
  return s2s_http_surl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_s2s_http_surl() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.s2s_http_surl)
  return s2s_http_surl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_s2s_http_surl(std::string* s2s_http_surl) {
  if (s2s_http_surl != nullptr) {
    
  } else {
    
  }
  s2s_http_surl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s2s_http_surl,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.s2s_http_surl)
}

// string s2s_http_curl1 = 5;
inline void service_discovery::clear_s2s_http_curl1() {
  s2s_http_curl1_.ClearToEmpty();
}
inline const std::string& service_discovery::s2s_http_curl1() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.s2s_http_curl1)
  return _internal_s2s_http_curl1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_s2s_http_curl1(ArgT0&& arg0, ArgT... args) {
 
 s2s_http_curl1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.s2s_http_curl1)
}
inline std::string* service_discovery::mutable_s2s_http_curl1() {
  std::string* _s = _internal_mutable_s2s_http_curl1();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.s2s_http_curl1)
  return _s;
}
inline const std::string& service_discovery::_internal_s2s_http_curl1() const {
  return s2s_http_curl1_.Get();
}
inline void service_discovery::_internal_set_s2s_http_curl1(const std::string& value) {
  
  s2s_http_curl1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_s2s_http_curl1() {
  
  return s2s_http_curl1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_s2s_http_curl1() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.s2s_http_curl1)
  return s2s_http_curl1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_s2s_http_curl1(std::string* s2s_http_curl1) {
  if (s2s_http_curl1 != nullptr) {
    
  } else {
    
  }
  s2s_http_curl1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s2s_http_curl1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.s2s_http_curl1)
}

// string s2s_http_curl2 = 6;
inline void service_discovery::clear_s2s_http_curl2() {
  s2s_http_curl2_.ClearToEmpty();
}
inline const std::string& service_discovery::s2s_http_curl2() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.s2s_http_curl2)
  return _internal_s2s_http_curl2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_s2s_http_curl2(ArgT0&& arg0, ArgT... args) {
 
 s2s_http_curl2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.s2s_http_curl2)
}
inline std::string* service_discovery::mutable_s2s_http_curl2() {
  std::string* _s = _internal_mutable_s2s_http_curl2();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.s2s_http_curl2)
  return _s;
}
inline const std::string& service_discovery::_internal_s2s_http_curl2() const {
  return s2s_http_curl2_.Get();
}
inline void service_discovery::_internal_set_s2s_http_curl2(const std::string& value) {
  
  s2s_http_curl2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_s2s_http_curl2() {
  
  return s2s_http_curl2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_s2s_http_curl2() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.s2s_http_curl2)
  return s2s_http_curl2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_s2s_http_curl2(std::string* s2s_http_curl2) {
  if (s2s_http_curl2 != nullptr) {
    
  } else {
    
  }
  s2s_http_curl2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s2s_http_curl2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.s2s_http_curl2)
}

// repeated .pb.sd_conn_attr conn_list = 7;
inline int service_discovery::_internal_conn_list_size() const {
  return conn_list_.size();
}
inline int service_discovery::conn_list_size() const {
  return _internal_conn_list_size();
}
inline void service_discovery::clear_conn_list() {
  conn_list_.Clear();
}
inline ::pb::sd_conn_attr* service_discovery::mutable_conn_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.conn_list)
  return conn_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::sd_conn_attr >*
service_discovery::mutable_conn_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.service_discovery.conn_list)
  return &conn_list_;
}
inline const ::pb::sd_conn_attr& service_discovery::_internal_conn_list(int index) const {
  return conn_list_.Get(index);
}
inline const ::pb::sd_conn_attr& service_discovery::conn_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.conn_list)
  return _internal_conn_list(index);
}
inline ::pb::sd_conn_attr* service_discovery::_internal_add_conn_list() {
  return conn_list_.Add();
}
inline ::pb::sd_conn_attr* service_discovery::add_conn_list() {
  ::pb::sd_conn_attr* _add = _internal_add_conn_list();
  // @@protoc_insertion_point(field_add:pb.service_discovery.conn_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::sd_conn_attr >&
service_discovery::conn_list() const {
  // @@protoc_insertion_point(field_list:pb.service_discovery.conn_list)
  return conn_list_;
}

// string c2s_inter_listen = 8;
inline void service_discovery::clear_c2s_inter_listen() {
  c2s_inter_listen_.ClearToEmpty();
}
inline const std::string& service_discovery::c2s_inter_listen() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.c2s_inter_listen)
  return _internal_c2s_inter_listen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_c2s_inter_listen(ArgT0&& arg0, ArgT... args) {
 
 c2s_inter_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.c2s_inter_listen)
}
inline std::string* service_discovery::mutable_c2s_inter_listen() {
  std::string* _s = _internal_mutable_c2s_inter_listen();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.c2s_inter_listen)
  return _s;
}
inline const std::string& service_discovery::_internal_c2s_inter_listen() const {
  return c2s_inter_listen_.Get();
}
inline void service_discovery::_internal_set_c2s_inter_listen(const std::string& value) {
  
  c2s_inter_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_c2s_inter_listen() {
  
  return c2s_inter_listen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_c2s_inter_listen() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.c2s_inter_listen)
  return c2s_inter_listen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_c2s_inter_listen(std::string* c2s_inter_listen) {
  if (c2s_inter_listen != nullptr) {
    
  } else {
    
  }
  c2s_inter_listen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c2s_inter_listen,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.c2s_inter_listen)
}

// string c2s_outer_listen = 9;
inline void service_discovery::clear_c2s_outer_listen() {
  c2s_outer_listen_.ClearToEmpty();
}
inline const std::string& service_discovery::c2s_outer_listen() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.c2s_outer_listen)
  return _internal_c2s_outer_listen();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_c2s_outer_listen(ArgT0&& arg0, ArgT... args) {
 
 c2s_outer_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.c2s_outer_listen)
}
inline std::string* service_discovery::mutable_c2s_outer_listen() {
  std::string* _s = _internal_mutable_c2s_outer_listen();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.c2s_outer_listen)
  return _s;
}
inline const std::string& service_discovery::_internal_c2s_outer_listen() const {
  return c2s_outer_listen_.Get();
}
inline void service_discovery::_internal_set_c2s_outer_listen(const std::string& value) {
  
  c2s_outer_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_c2s_outer_listen() {
  
  return c2s_outer_listen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_c2s_outer_listen() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.c2s_outer_listen)
  return c2s_outer_listen_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_c2s_outer_listen(std::string* c2s_outer_listen) {
  if (c2s_outer_listen != nullptr) {
    
  } else {
    
  }
  c2s_outer_listen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c2s_outer_listen,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.c2s_outer_listen)
}

// string c2s_https_url = 10;
inline void service_discovery::clear_c2s_https_url() {
  c2s_https_url_.ClearToEmpty();
}
inline const std::string& service_discovery::c2s_https_url() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.c2s_https_url)
  return _internal_c2s_https_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_c2s_https_url(ArgT0&& arg0, ArgT... args) {
 
 c2s_https_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.c2s_https_url)
}
inline std::string* service_discovery::mutable_c2s_https_url() {
  std::string* _s = _internal_mutable_c2s_https_url();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.c2s_https_url)
  return _s;
}
inline const std::string& service_discovery::_internal_c2s_https_url() const {
  return c2s_https_url_.Get();
}
inline void service_discovery::_internal_set_c2s_https_url(const std::string& value) {
  
  c2s_https_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_c2s_https_url() {
  
  return c2s_https_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_c2s_https_url() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.c2s_https_url)
  return c2s_https_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_c2s_https_url(std::string* c2s_https_url) {
  if (c2s_https_url != nullptr) {
    
  } else {
    
  }
  c2s_https_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c2s_https_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.c2s_https_url)
}

// string c2s_https_cert = 11;
inline void service_discovery::clear_c2s_https_cert() {
  c2s_https_cert_.ClearToEmpty();
}
inline const std::string& service_discovery::c2s_https_cert() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.c2s_https_cert)
  return _internal_c2s_https_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_c2s_https_cert(ArgT0&& arg0, ArgT... args) {
 
 c2s_https_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.c2s_https_cert)
}
inline std::string* service_discovery::mutable_c2s_https_cert() {
  std::string* _s = _internal_mutable_c2s_https_cert();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.c2s_https_cert)
  return _s;
}
inline const std::string& service_discovery::_internal_c2s_https_cert() const {
  return c2s_https_cert_.Get();
}
inline void service_discovery::_internal_set_c2s_https_cert(const std::string& value) {
  
  c2s_https_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_c2s_https_cert() {
  
  return c2s_https_cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_c2s_https_cert() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.c2s_https_cert)
  return c2s_https_cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_c2s_https_cert(std::string* c2s_https_cert) {
  if (c2s_https_cert != nullptr) {
    
  } else {
    
  }
  c2s_https_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c2s_https_cert,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.c2s_https_cert)
}

// string c2s_https_key = 12;
inline void service_discovery::clear_c2s_https_key() {
  c2s_https_key_.ClearToEmpty();
}
inline const std::string& service_discovery::c2s_https_key() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.c2s_https_key)
  return _internal_c2s_https_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_c2s_https_key(ArgT0&& arg0, ArgT... args) {
 
 c2s_https_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.c2s_https_key)
}
inline std::string* service_discovery::mutable_c2s_https_key() {
  std::string* _s = _internal_mutable_c2s_https_key();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.c2s_https_key)
  return _s;
}
inline const std::string& service_discovery::_internal_c2s_https_key() const {
  return c2s_https_key_.Get();
}
inline void service_discovery::_internal_set_c2s_https_key(const std::string& value) {
  
  c2s_https_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_c2s_https_key() {
  
  return c2s_https_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_c2s_https_key() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.c2s_https_key)
  return c2s_https_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_c2s_https_key(std::string* c2s_https_key) {
  if (c2s_https_key != nullptr) {
    
  } else {
    
  }
  c2s_https_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c2s_https_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.c2s_https_key)
}

// string sdk_tcp_inter = 13;
inline void service_discovery::clear_sdk_tcp_inter() {
  sdk_tcp_inter_.ClearToEmpty();
}
inline const std::string& service_discovery::sdk_tcp_inter() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.sdk_tcp_inter)
  return _internal_sdk_tcp_inter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_sdk_tcp_inter(ArgT0&& arg0, ArgT... args) {
 
 sdk_tcp_inter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.sdk_tcp_inter)
}
inline std::string* service_discovery::mutable_sdk_tcp_inter() {
  std::string* _s = _internal_mutable_sdk_tcp_inter();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.sdk_tcp_inter)
  return _s;
}
inline const std::string& service_discovery::_internal_sdk_tcp_inter() const {
  return sdk_tcp_inter_.Get();
}
inline void service_discovery::_internal_set_sdk_tcp_inter(const std::string& value) {
  
  sdk_tcp_inter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_sdk_tcp_inter() {
  
  return sdk_tcp_inter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_sdk_tcp_inter() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.sdk_tcp_inter)
  return sdk_tcp_inter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_sdk_tcp_inter(std::string* sdk_tcp_inter) {
  if (sdk_tcp_inter != nullptr) {
    
  } else {
    
  }
  sdk_tcp_inter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_tcp_inter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.sdk_tcp_inter)
}

// string sdk_tcp_out = 14;
inline void service_discovery::clear_sdk_tcp_out() {
  sdk_tcp_out_.ClearToEmpty();
}
inline const std::string& service_discovery::sdk_tcp_out() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.sdk_tcp_out)
  return _internal_sdk_tcp_out();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_sdk_tcp_out(ArgT0&& arg0, ArgT... args) {
 
 sdk_tcp_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.sdk_tcp_out)
}
inline std::string* service_discovery::mutable_sdk_tcp_out() {
  std::string* _s = _internal_mutable_sdk_tcp_out();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.sdk_tcp_out)
  return _s;
}
inline const std::string& service_discovery::_internal_sdk_tcp_out() const {
  return sdk_tcp_out_.Get();
}
inline void service_discovery::_internal_set_sdk_tcp_out(const std::string& value) {
  
  sdk_tcp_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_sdk_tcp_out() {
  
  return sdk_tcp_out_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_sdk_tcp_out() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.sdk_tcp_out)
  return sdk_tcp_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_sdk_tcp_out(std::string* sdk_tcp_out) {
  if (sdk_tcp_out != nullptr) {
    
  } else {
    
  }
  sdk_tcp_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_tcp_out,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.sdk_tcp_out)
}

// string sdk_https_urtl = 15;
inline void service_discovery::clear_sdk_https_urtl() {
  sdk_https_urtl_.ClearToEmpty();
}
inline const std::string& service_discovery::sdk_https_urtl() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.sdk_https_urtl)
  return _internal_sdk_https_urtl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_sdk_https_urtl(ArgT0&& arg0, ArgT... args) {
 
 sdk_https_urtl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.sdk_https_urtl)
}
inline std::string* service_discovery::mutable_sdk_https_urtl() {
  std::string* _s = _internal_mutable_sdk_https_urtl();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.sdk_https_urtl)
  return _s;
}
inline const std::string& service_discovery::_internal_sdk_https_urtl() const {
  return sdk_https_urtl_.Get();
}
inline void service_discovery::_internal_set_sdk_https_urtl(const std::string& value) {
  
  sdk_https_urtl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_sdk_https_urtl() {
  
  return sdk_https_urtl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_sdk_https_urtl() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.sdk_https_urtl)
  return sdk_https_urtl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_sdk_https_urtl(std::string* sdk_https_urtl) {
  if (sdk_https_urtl != nullptr) {
    
  } else {
    
  }
  sdk_https_urtl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_https_urtl,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.sdk_https_urtl)
}

// string sdk_https_cert = 16;
inline void service_discovery::clear_sdk_https_cert() {
  sdk_https_cert_.ClearToEmpty();
}
inline const std::string& service_discovery::sdk_https_cert() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.sdk_https_cert)
  return _internal_sdk_https_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_sdk_https_cert(ArgT0&& arg0, ArgT... args) {
 
 sdk_https_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.sdk_https_cert)
}
inline std::string* service_discovery::mutable_sdk_https_cert() {
  std::string* _s = _internal_mutable_sdk_https_cert();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.sdk_https_cert)
  return _s;
}
inline const std::string& service_discovery::_internal_sdk_https_cert() const {
  return sdk_https_cert_.Get();
}
inline void service_discovery::_internal_set_sdk_https_cert(const std::string& value) {
  
  sdk_https_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_sdk_https_cert() {
  
  return sdk_https_cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_sdk_https_cert() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.sdk_https_cert)
  return sdk_https_cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_sdk_https_cert(std::string* sdk_https_cert) {
  if (sdk_https_cert != nullptr) {
    
  } else {
    
  }
  sdk_https_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_https_cert,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.sdk_https_cert)
}

// string sdk_https_key = 17;
inline void service_discovery::clear_sdk_https_key() {
  sdk_https_key_.ClearToEmpty();
}
inline const std::string& service_discovery::sdk_https_key() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery.sdk_https_key)
  return _internal_sdk_https_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery::set_sdk_https_key(ArgT0&& arg0, ArgT... args) {
 
 sdk_https_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery.sdk_https_key)
}
inline std::string* service_discovery::mutable_sdk_https_key() {
  std::string* _s = _internal_mutable_sdk_https_key();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery.sdk_https_key)
  return _s;
}
inline const std::string& service_discovery::_internal_sdk_https_key() const {
  return sdk_https_key_.Get();
}
inline void service_discovery::_internal_set_sdk_https_key(const std::string& value) {
  
  sdk_https_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery::_internal_mutable_sdk_https_key() {
  
  return sdk_https_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery::release_sdk_https_key() {
  // @@protoc_insertion_point(field_release:pb.service_discovery.sdk_https_key)
  return sdk_https_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery::set_allocated_sdk_https_key(std::string* sdk_https_key) {
  if (sdk_https_key != nullptr) {
    
  } else {
    
  }
  sdk_https_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_https_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery.sdk_https_key)
}

// -------------------------------------------------------------------

// service_discovery_req

// uint64 server_id = 1;
inline void service_discovery_req::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 service_discovery_req::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 service_discovery_req::server_id() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery_req.server_id)
  return _internal_server_id();
}
inline void service_discovery_req::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void service_discovery_req::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:pb.service_discovery_req.server_id)
}

// string token = 2;
inline void service_discovery_req::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& service_discovery_req::token() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery_req.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void service_discovery_req::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.service_discovery_req.token)
}
inline std::string* service_discovery_req::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery_req.token)
  return _s;
}
inline const std::string& service_discovery_req::_internal_token() const {
  return token_.Get();
}
inline void service_discovery_req::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* service_discovery_req::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* service_discovery_req::release_token() {
  // @@protoc_insertion_point(field_release:pb.service_discovery_req.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void service_discovery_req::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery_req.token)
}

// -------------------------------------------------------------------

// service_discovery_ack

// bool rebuild_flag = 1;
inline void service_discovery_ack::clear_rebuild_flag() {
  rebuild_flag_ = false;
}
inline bool service_discovery_ack::_internal_rebuild_flag() const {
  return rebuild_flag_;
}
inline bool service_discovery_ack::rebuild_flag() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery_ack.rebuild_flag)
  return _internal_rebuild_flag();
}
inline void service_discovery_ack::_internal_set_rebuild_flag(bool value) {
  
  rebuild_flag_ = value;
}
inline void service_discovery_ack::set_rebuild_flag(bool value) {
  _internal_set_rebuild_flag(value);
  // @@protoc_insertion_point(field_set:pb.service_discovery_ack.rebuild_flag)
}

// bool verify_flag = 2;
inline void service_discovery_ack::clear_verify_flag() {
  verify_flag_ = false;
}
inline bool service_discovery_ack::_internal_verify_flag() const {
  return verify_flag_;
}
inline bool service_discovery_ack::verify_flag() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery_ack.verify_flag)
  return _internal_verify_flag();
}
inline void service_discovery_ack::_internal_set_verify_flag(bool value) {
  
  verify_flag_ = value;
}
inline void service_discovery_ack::set_verify_flag(bool value) {
  _internal_set_verify_flag(value);
  // @@protoc_insertion_point(field_set:pb.service_discovery_ack.verify_flag)
}

// .pb.service_discovery sd_info = 3;
inline bool service_discovery_ack::_internal_has_sd_info() const {
  return this != internal_default_instance() && sd_info_ != nullptr;
}
inline bool service_discovery_ack::has_sd_info() const {
  return _internal_has_sd_info();
}
inline void service_discovery_ack::clear_sd_info() {
  if (GetArenaForAllocation() == nullptr && sd_info_ != nullptr) {
    delete sd_info_;
  }
  sd_info_ = nullptr;
}
inline const ::pb::service_discovery& service_discovery_ack::_internal_sd_info() const {
  const ::pb::service_discovery* p = sd_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::service_discovery&>(
      ::pb::_service_discovery_default_instance_);
}
inline const ::pb::service_discovery& service_discovery_ack::sd_info() const {
  // @@protoc_insertion_point(field_get:pb.service_discovery_ack.sd_info)
  return _internal_sd_info();
}
inline void service_discovery_ack::unsafe_arena_set_allocated_sd_info(
    ::pb::service_discovery* sd_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sd_info_);
  }
  sd_info_ = sd_info;
  if (sd_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.service_discovery_ack.sd_info)
}
inline ::pb::service_discovery* service_discovery_ack::release_sd_info() {
  
  ::pb::service_discovery* temp = sd_info_;
  sd_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::service_discovery* service_discovery_ack::unsafe_arena_release_sd_info() {
  // @@protoc_insertion_point(field_release:pb.service_discovery_ack.sd_info)
  
  ::pb::service_discovery* temp = sd_info_;
  sd_info_ = nullptr;
  return temp;
}
inline ::pb::service_discovery* service_discovery_ack::_internal_mutable_sd_info() {
  
  if (sd_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::service_discovery>(GetArenaForAllocation());
    sd_info_ = p;
  }
  return sd_info_;
}
inline ::pb::service_discovery* service_discovery_ack::mutable_sd_info() {
  ::pb::service_discovery* _msg = _internal_mutable_sd_info();
  // @@protoc_insertion_point(field_mutable:pb.service_discovery_ack.sd_info)
  return _msg;
}
inline void service_discovery_ack::set_allocated_sd_info(::pb::service_discovery* sd_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sd_info_;
  }
  if (sd_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pb::service_discovery>::GetOwningArena(sd_info);
    if (message_arena != submessage_arena) {
      sd_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sd_info, submessage_arena);
    }
    
  } else {
    
  }
  sd_info_ = sd_info;
  // @@protoc_insertion_point(field_set_allocated:pb.service_discovery_ack.sd_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::S2SBaseMsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::S2SBaseMsgId>() {
  return ::pb::S2SBaseMsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ss_5fbase_2eproto
