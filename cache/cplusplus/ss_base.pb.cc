// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_base.proto

#include "ss_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pb {
constexpr s2s_server_session_veriry_req::s2s_server_session_veriry_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_type_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(uint64_t{0u})
  , server_type_(0u){}
struct s2s_server_session_veriry_reqDefaultTypeInternal {
  constexpr s2s_server_session_veriry_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~s2s_server_session_veriry_reqDefaultTypeInternal() {}
  union {
    s2s_server_session_veriry_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT s2s_server_session_veriry_reqDefaultTypeInternal _s2s_server_session_veriry_req_default_instance_;
constexpr s2s_server_session_veriry_ack::s2s_server_session_veriry_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct s2s_server_session_veriry_ackDefaultTypeInternal {
  constexpr s2s_server_session_veriry_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~s2s_server_session_veriry_ackDefaultTypeInternal() {}
  union {
    s2s_server_session_veriry_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT s2s_server_session_veriry_ackDefaultTypeInternal _s2s_server_session_veriry_ack_default_instance_;
constexpr s2s_server_session_ping::s2s_server_session_ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct s2s_server_session_pingDefaultTypeInternal {
  constexpr s2s_server_session_pingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~s2s_server_session_pingDefaultTypeInternal() {}
  union {
    s2s_server_session_ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT s2s_server_session_pingDefaultTypeInternal _s2s_server_session_ping_default_instance_;
constexpr s2s_server_session_pong::s2s_server_session_pong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct s2s_server_session_pongDefaultTypeInternal {
  constexpr s2s_server_session_pongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~s2s_server_session_pongDefaultTypeInternal() {}
  union {
    s2s_server_session_pong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT s2s_server_session_pongDefaultTypeInternal _s2s_server_session_pong_default_instance_;
constexpr s2s_client_session_ping::s2s_client_session_ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct s2s_client_session_pingDefaultTypeInternal {
  constexpr s2s_client_session_pingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~s2s_client_session_pingDefaultTypeInternal() {}
  union {
    s2s_client_session_ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT s2s_client_session_pingDefaultTypeInternal _s2s_client_session_ping_default_instance_;
constexpr s2s_client_session_pong::s2s_client_session_pong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct s2s_client_session_pongDefaultTypeInternal {
  constexpr s2s_client_session_pongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~s2s_client_session_pongDefaultTypeInternal() {}
  union {
    s2s_client_session_pong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT s2s_client_session_pongDefaultTypeInternal _s2s_client_session_pong_default_instance_;
constexpr sd_conn_attr::sd_conn_attr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_type_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(uint64_t{0u})
  , server_type_(0u){}
struct sd_conn_attrDefaultTypeInternal {
  constexpr sd_conn_attrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sd_conn_attrDefaultTypeInternal() {}
  union {
    sd_conn_attr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sd_conn_attrDefaultTypeInternal _sd_conn_attr_default_instance_;
constexpr service_discovery::service_discovery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conn_list_()
  , s2s_inter_listen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s2s_outer_listen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s2s_http_surl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s2s_http_curl1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s2s_http_curl2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c2s_inter_listen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c2s_outer_listen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c2s_https_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c2s_https_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , c2s_https_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_tcp_inter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_tcp_out_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_https_urtl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_https_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_https_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(uint64_t{0u}){}
struct service_discoveryDefaultTypeInternal {
  constexpr service_discoveryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~service_discoveryDefaultTypeInternal() {}
  union {
    service_discovery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT service_discoveryDefaultTypeInternal _service_discovery_default_instance_;
constexpr service_discovery_req::service_discovery_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(uint64_t{0u}){}
struct service_discovery_reqDefaultTypeInternal {
  constexpr service_discovery_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~service_discovery_reqDefaultTypeInternal() {}
  union {
    service_discovery_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT service_discovery_reqDefaultTypeInternal _service_discovery_req_default_instance_;
constexpr service_discovery_ack::service_discovery_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sd_info_(nullptr)
  , rebuild_flag_(false)
  , verify_flag_(false){}
struct service_discovery_ackDefaultTypeInternal {
  constexpr service_discovery_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~service_discovery_ackDefaultTypeInternal() {}
  union {
    service_discovery_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT service_discovery_ackDefaultTypeInternal _service_discovery_ack_default_instance_;
}  // namespace pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ss_5fbase_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ss_5fbase_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ss_5fbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ss_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, server_type_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, server_type_str_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, ip_),
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_req, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_veriry_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_server_session_pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_client_session_ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::s2s_client_session_pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, server_type_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, server_type_str_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, inter_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, outer_),
  PROTOBUF_FIELD_OFFSET(::pb::sd_conn_attr, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_inter_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_outer_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_http_surl_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_http_curl1_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, s2s_http_curl2_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, conn_list_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_inter_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_outer_listen_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_https_url_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_https_cert_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, c2s_https_key_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, sdk_tcp_inter_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, sdk_tcp_out_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, sdk_https_urtl_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, sdk_https_cert_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery, sdk_https_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_req, server_id_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_req, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, rebuild_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, verify_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::service_discovery_ack, sd_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::s2s_server_session_veriry_req)},
  { 10, -1, sizeof(::pb::s2s_server_session_veriry_ack)},
  { 15, -1, sizeof(::pb::s2s_server_session_ping)},
  { 20, -1, sizeof(::pb::s2s_server_session_pong)},
  { 25, -1, sizeof(::pb::s2s_client_session_ping)},
  { 30, -1, sizeof(::pb::s2s_client_session_pong)},
  { 35, -1, sizeof(::pb::sd_conn_attr)},
  { 46, -1, sizeof(::pb::service_discovery)},
  { 68, -1, sizeof(::pb::service_discovery_req)},
  { 75, -1, sizeof(::pb::service_discovery_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_veriry_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_veriry_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_server_session_pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_client_session_ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_s2s_client_session_pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_sd_conn_attr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_service_discovery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_service_discovery_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_service_discovery_ack_default_instance_),
};

const char descriptor_table_protodef_ss_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rss_base.proto\022\002pb\"{\n\035s2s_server_sessio"
  "n_veriry_req\022\021\n\tserver_id\030\001 \001(\004\022\023\n\013serve"
  "r_type\030\002 \001(\r\022\027\n\017server_type_str\030\003 \001(\t\022\n\n"
  "\002ip\030\004 \001(\t\022\r\n\005token\030\005 \001(\t\"\037\n\035s2s_server_s"
  "ession_veriry_ack\"\031\n\027s2s_server_session_"
  "ping\"\031\n\027s2s_server_session_pong\"\031\n\027s2s_c"
  "lient_session_ping\"\031\n\027s2s_client_session"
  "_pong\"|\n\014sd_conn_attr\022\021\n\tserver_id\030\001 \001(\004"
  "\022\023\n\013server_type\030\002 \001(\r\022\027\n\017server_type_str"
  "\030\003 \001(\t\022\r\n\005inter\030\004 \001(\t\022\r\n\005outer\030\005 \001(\t\022\r\n\005"
  "token\030\006 \001(\t\"\263\003\n\021service_discovery\022\021\n\tser"
  "ver_id\030\001 \001(\004\022\030\n\020s2s_inter_listen\030\002 \001(\t\022\030"
  "\n\020s2s_outer_listen\030\003 \001(\t\022\025\n\rs2s_http_sur"
  "l\030\004 \001(\t\022\026\n\016s2s_http_curl1\030\005 \001(\t\022\026\n\016s2s_h"
  "ttp_curl2\030\006 \001(\t\022#\n\tconn_list\030\007 \003(\0132\020.pb."
  "sd_conn_attr\022\030\n\020c2s_inter_listen\030\010 \001(\t\022\030"
  "\n\020c2s_outer_listen\030\t \001(\t\022\025\n\rc2s_https_ur"
  "l\030\n \001(\t\022\026\n\016c2s_https_cert\030\013 \001(\t\022\025\n\rc2s_h"
  "ttps_key\030\014 \001(\t\022\025\n\rsdk_tcp_inter\030\r \001(\t\022\023\n"
  "\013sdk_tcp_out\030\016 \001(\t\022\026\n\016sdk_https_urtl\030\017 \001"
  "(\t\022\026\n\016sdk_https_cert\030\020 \001(\t\022\025\n\rsdk_https_"
  "key\030\021 \001(\t\"9\n\025service_discovery_req\022\021\n\tse"
  "rver_id\030\001 \001(\004\022\r\n\005token\030\002 \001(\t\"j\n\025service_"
  "discovery_ack\022\024\n\014rebuild_flag\030\001 \001(\010\022\023\n\013v"
  "erify_flag\030\002 \001(\010\022&\n\007sd_info\030\003 \001(\0132\025.pb.s"
  "ervice_discovery*\311\002\n\014S2SBaseMsgId\022\027\n\023s2s"
  "_base_min_msg_id\020\000\022$\n s2s_server_session"
  "_veriry_req_id\020\001\022$\n s2s_server_session_v"
  "eriry_ack_id\020\002\022\036\n\032s2s_server_session_pin"
  "g_id\020\003\022\036\n\032s2s_server_session_pong_id\020\004\022\036"
  "\n\032s2s_client_session_ping_id\020\005\022\036\n\032s2s_cl"
  "ient_session_pong_id\020\006\022\034\n\030service_discov"
  "ery_req_id\020\007\022\034\n\030service_discovery_ack_id"
  "\020\010\022\030\n\023s2s_base_max_msg_id\020\253\002B\013Z\t./;confi"
  "gb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ss_5fbase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ss_5fbase_2eproto = {
  false, false, 1369, descriptor_table_protodef_ss_5fbase_2eproto, "ss_base.proto", 
  &descriptor_table_ss_5fbase_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_ss_5fbase_2eproto::offsets,
  file_level_metadata_ss_5fbase_2eproto, file_level_enum_descriptors_ss_5fbase_2eproto, file_level_service_descriptors_ss_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ss_5fbase_2eproto_getter() {
  return &descriptor_table_ss_5fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ss_5fbase_2eproto(&descriptor_table_ss_5fbase_2eproto);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S2SBaseMsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ss_5fbase_2eproto);
  return file_level_enum_descriptors_ss_5fbase_2eproto[0];
}
bool S2SBaseMsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 299:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class s2s_server_session_veriry_req::_Internal {
 public:
};

s2s_server_session_veriry_req::s2s_server_session_veriry_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.s2s_server_session_veriry_req)
}
s2s_server_session_veriry_req::s2s_server_session_veriry_req(const s2s_server_session_veriry_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_type_str().empty()) {
    server_type_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_type_str(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_veriry_req)
}

inline void s2s_server_session_veriry_req::SharedCtor() {
server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
}

s2s_server_session_veriry_req::~s2s_server_session_veriry_req() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_veriry_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void s2s_server_session_veriry_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_type_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void s2s_server_session_veriry_req::ArenaDtor(void* object) {
  s2s_server_session_veriry_req* _this = reinterpret_cast< s2s_server_session_veriry_req* >(object);
  (void)_this;
}
void s2s_server_session_veriry_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s2s_server_session_veriry_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void s2s_server_session_veriry_req::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_veriry_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_type_str_.ClearToEmpty();
  ip_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2s_server_session_veriry_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_type_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_type_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.s2s_server_session_veriry_req.server_type_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.s2s_server_session_veriry_req.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.s2s_server_session_veriry_req.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_veriry_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_veriry_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // uint32 server_type = 2;
  if (this->_internal_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_type(), target);
  }

  // string server_type_str = 3;
  if (!this->_internal_server_type_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_type_str().data(), static_cast<int>(this->_internal_server_type_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.s2s_server_session_veriry_req.server_type_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_type_str(), target);
  }

  // string ip = 4;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.s2s_server_session_veriry_req.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // string token = 5;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.s2s_server_session_veriry_req.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_veriry_req)
  return target;
}

size_t s2s_server_session_veriry_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_veriry_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_type_str = 3;
  if (!this->_internal_server_type_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_type_str());
  }

  // string ip = 4;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string token = 5;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  // uint32 server_type = 2;
  if (this->_internal_server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2s_server_session_veriry_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    s2s_server_session_veriry_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2s_server_session_veriry_req::GetClassData() const { return &_class_data_; }

void s2s_server_session_veriry_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<s2s_server_session_veriry_req *>(to)->MergeFrom(
      static_cast<const s2s_server_session_veriry_req &>(from));
}


void s2s_server_session_veriry_req::MergeFrom(const s2s_server_session_veriry_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_veriry_req)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_type_str().empty()) {
    _internal_set_server_type_str(from._internal_server_type_str());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_server_type() != 0) {
    _internal_set_server_type(from._internal_server_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2s_server_session_veriry_req::CopyFrom(const s2s_server_session_veriry_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_veriry_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_veriry_req::IsInitialized() const {
  return true;
}

void s2s_server_session_veriry_req::InternalSwap(s2s_server_session_veriry_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_type_str_, GetArenaForAllocation(),
      &other->server_type_str_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(s2s_server_session_veriry_req, server_type_)
      + sizeof(s2s_server_session_veriry_req::server_type_)
      - PROTOBUF_FIELD_OFFSET(s2s_server_session_veriry_req, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_veriry_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[0]);
}

// ===================================================================

class s2s_server_session_veriry_ack::_Internal {
 public:
};

s2s_server_session_veriry_ack::s2s_server_session_veriry_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.s2s_server_session_veriry_ack)
}
s2s_server_session_veriry_ack::s2s_server_session_veriry_ack(const s2s_server_session_veriry_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_veriry_ack)
}

inline void s2s_server_session_veriry_ack::SharedCtor() {
}

s2s_server_session_veriry_ack::~s2s_server_session_veriry_ack() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_veriry_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void s2s_server_session_veriry_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2s_server_session_veriry_ack::ArenaDtor(void* object) {
  s2s_server_session_veriry_ack* _this = reinterpret_cast< s2s_server_session_veriry_ack* >(object);
  (void)_this;
}
void s2s_server_session_veriry_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s2s_server_session_veriry_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void s2s_server_session_veriry_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_veriry_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2s_server_session_veriry_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_veriry_ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_veriry_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_veriry_ack)
  return target;
}

size_t s2s_server_session_veriry_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_veriry_ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2s_server_session_veriry_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    s2s_server_session_veriry_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2s_server_session_veriry_ack::GetClassData() const { return &_class_data_; }

void s2s_server_session_veriry_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<s2s_server_session_veriry_ack *>(to)->MergeFrom(
      static_cast<const s2s_server_session_veriry_ack &>(from));
}


void s2s_server_session_veriry_ack::MergeFrom(const s2s_server_session_veriry_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_veriry_ack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2s_server_session_veriry_ack::CopyFrom(const s2s_server_session_veriry_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_veriry_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_veriry_ack::IsInitialized() const {
  return true;
}

void s2s_server_session_veriry_ack::InternalSwap(s2s_server_session_veriry_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_veriry_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[1]);
}

// ===================================================================

class s2s_server_session_ping::_Internal {
 public:
};

s2s_server_session_ping::s2s_server_session_ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.s2s_server_session_ping)
}
s2s_server_session_ping::s2s_server_session_ping(const s2s_server_session_ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_ping)
}

inline void s2s_server_session_ping::SharedCtor() {
}

s2s_server_session_ping::~s2s_server_session_ping() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_ping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void s2s_server_session_ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2s_server_session_ping::ArenaDtor(void* object) {
  s2s_server_session_ping* _this = reinterpret_cast< s2s_server_session_ping* >(object);
  (void)_this;
}
void s2s_server_session_ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s2s_server_session_ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void s2s_server_session_ping::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2s_server_session_ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_ping)
  return target;
}

size_t s2s_server_session_ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2s_server_session_ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    s2s_server_session_ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2s_server_session_ping::GetClassData() const { return &_class_data_; }

void s2s_server_session_ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<s2s_server_session_ping *>(to)->MergeFrom(
      static_cast<const s2s_server_session_ping &>(from));
}


void s2s_server_session_ping::MergeFrom(const s2s_server_session_ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_ping)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2s_server_session_ping::CopyFrom(const s2s_server_session_ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_ping::IsInitialized() const {
  return true;
}

void s2s_server_session_ping::InternalSwap(s2s_server_session_ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_ping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[2]);
}

// ===================================================================

class s2s_server_session_pong::_Internal {
 public:
};

s2s_server_session_pong::s2s_server_session_pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.s2s_server_session_pong)
}
s2s_server_session_pong::s2s_server_session_pong(const s2s_server_session_pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_server_session_pong)
}

inline void s2s_server_session_pong::SharedCtor() {
}

s2s_server_session_pong::~s2s_server_session_pong() {
  // @@protoc_insertion_point(destructor:pb.s2s_server_session_pong)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void s2s_server_session_pong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2s_server_session_pong::ArenaDtor(void* object) {
  s2s_server_session_pong* _this = reinterpret_cast< s2s_server_session_pong* >(object);
  (void)_this;
}
void s2s_server_session_pong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s2s_server_session_pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void s2s_server_session_pong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_server_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2s_server_session_pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_server_session_pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_server_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_server_session_pong)
  return target;
}

size_t s2s_server_session_pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_server_session_pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2s_server_session_pong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    s2s_server_session_pong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2s_server_session_pong::GetClassData() const { return &_class_data_; }

void s2s_server_session_pong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<s2s_server_session_pong *>(to)->MergeFrom(
      static_cast<const s2s_server_session_pong &>(from));
}


void s2s_server_session_pong::MergeFrom(const s2s_server_session_pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_server_session_pong)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2s_server_session_pong::CopyFrom(const s2s_server_session_pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_server_session_pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_server_session_pong::IsInitialized() const {
  return true;
}

void s2s_server_session_pong::InternalSwap(s2s_server_session_pong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_server_session_pong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[3]);
}

// ===================================================================

class s2s_client_session_ping::_Internal {
 public:
};

s2s_client_session_ping::s2s_client_session_ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.s2s_client_session_ping)
}
s2s_client_session_ping::s2s_client_session_ping(const s2s_client_session_ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_client_session_ping)
}

inline void s2s_client_session_ping::SharedCtor() {
}

s2s_client_session_ping::~s2s_client_session_ping() {
  // @@protoc_insertion_point(destructor:pb.s2s_client_session_ping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void s2s_client_session_ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2s_client_session_ping::ArenaDtor(void* object) {
  s2s_client_session_ping* _this = reinterpret_cast< s2s_client_session_ping* >(object);
  (void)_this;
}
void s2s_client_session_ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s2s_client_session_ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void s2s_client_session_ping::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_client_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2s_client_session_ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_client_session_ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_client_session_ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_client_session_ping)
  return target;
}

size_t s2s_client_session_ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_client_session_ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2s_client_session_ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    s2s_client_session_ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2s_client_session_ping::GetClassData() const { return &_class_data_; }

void s2s_client_session_ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<s2s_client_session_ping *>(to)->MergeFrom(
      static_cast<const s2s_client_session_ping &>(from));
}


void s2s_client_session_ping::MergeFrom(const s2s_client_session_ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_client_session_ping)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2s_client_session_ping::CopyFrom(const s2s_client_session_ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_client_session_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_client_session_ping::IsInitialized() const {
  return true;
}

void s2s_client_session_ping::InternalSwap(s2s_client_session_ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_client_session_ping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[4]);
}

// ===================================================================

class s2s_client_session_pong::_Internal {
 public:
};

s2s_client_session_pong::s2s_client_session_pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.s2s_client_session_pong)
}
s2s_client_session_pong::s2s_client_session_pong(const s2s_client_session_pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.s2s_client_session_pong)
}

inline void s2s_client_session_pong::SharedCtor() {
}

s2s_client_session_pong::~s2s_client_session_pong() {
  // @@protoc_insertion_point(destructor:pb.s2s_client_session_pong)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void s2s_client_session_pong::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void s2s_client_session_pong::ArenaDtor(void* object) {
  s2s_client_session_pong* _this = reinterpret_cast< s2s_client_session_pong* >(object);
  (void)_this;
}
void s2s_client_session_pong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void s2s_client_session_pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void s2s_client_session_pong::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.s2s_client_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* s2s_client_session_pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* s2s_client_session_pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.s2s_client_session_pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.s2s_client_session_pong)
  return target;
}

size_t s2s_client_session_pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.s2s_client_session_pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData s2s_client_session_pong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    s2s_client_session_pong::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*s2s_client_session_pong::GetClassData() const { return &_class_data_; }

void s2s_client_session_pong::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<s2s_client_session_pong *>(to)->MergeFrom(
      static_cast<const s2s_client_session_pong &>(from));
}


void s2s_client_session_pong::MergeFrom(const s2s_client_session_pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.s2s_client_session_pong)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void s2s_client_session_pong::CopyFrom(const s2s_client_session_pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.s2s_client_session_pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2s_client_session_pong::IsInitialized() const {
  return true;
}

void s2s_client_session_pong::InternalSwap(s2s_client_session_pong* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata s2s_client_session_pong::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[5]);
}

// ===================================================================

class sd_conn_attr::_Internal {
 public:
};

sd_conn_attr::sd_conn_attr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.sd_conn_attr)
}
sd_conn_attr::sd_conn_attr(const sd_conn_attr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_type_str().empty()) {
    server_type_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_type_str(), 
      GetArenaForAllocation());
  }
  inter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inter().empty()) {
    inter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inter(), 
      GetArenaForAllocation());
  }
  outer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outer().empty()) {
    outer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outer(), 
      GetArenaForAllocation());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:pb.sd_conn_attr)
}

inline void sd_conn_attr::SharedCtor() {
server_type_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
inter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
outer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
}

sd_conn_attr::~sd_conn_attr() {
  // @@protoc_insertion_point(destructor:pb.sd_conn_attr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sd_conn_attr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_type_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sd_conn_attr::ArenaDtor(void* object) {
  sd_conn_attr* _this = reinterpret_cast< sd_conn_attr* >(object);
  (void)_this;
}
void sd_conn_attr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sd_conn_attr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sd_conn_attr::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.sd_conn_attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_type_str_.ClearToEmpty();
  inter_.ClearToEmpty();
  outer_.ClearToEmpty();
  token_.ClearToEmpty();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sd_conn_attr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_type_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_server_type_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.server_type_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.inter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string outer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_outer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.outer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.sd_conn_attr.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sd_conn_attr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.sd_conn_attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // uint32 server_type = 2;
  if (this->_internal_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_type(), target);
  }

  // string server_type_str = 3;
  if (!this->_internal_server_type_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_type_str().data(), static_cast<int>(this->_internal_server_type_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.server_type_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_type_str(), target);
  }

  // string inter = 4;
  if (!this->_internal_inter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inter().data(), static_cast<int>(this->_internal_inter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.inter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_inter(), target);
  }

  // string outer = 5;
  if (!this->_internal_outer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outer().data(), static_cast<int>(this->_internal_outer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.outer");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_outer(), target);
  }

  // string token = 6;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.sd_conn_attr.token");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.sd_conn_attr)
  return target;
}

size_t sd_conn_attr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.sd_conn_attr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_type_str = 3;
  if (!this->_internal_server_type_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_type_str());
  }

  // string inter = 4;
  if (!this->_internal_inter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inter());
  }

  // string outer = 5;
  if (!this->_internal_outer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outer());
  }

  // string token = 6;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  // uint32 server_type = 2;
  if (this->_internal_server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sd_conn_attr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sd_conn_attr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sd_conn_attr::GetClassData() const { return &_class_data_; }

void sd_conn_attr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<sd_conn_attr *>(to)->MergeFrom(
      static_cast<const sd_conn_attr &>(from));
}


void sd_conn_attr::MergeFrom(const sd_conn_attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.sd_conn_attr)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_type_str().empty()) {
    _internal_set_server_type_str(from._internal_server_type_str());
  }
  if (!from._internal_inter().empty()) {
    _internal_set_inter(from._internal_inter());
  }
  if (!from._internal_outer().empty()) {
    _internal_set_outer(from._internal_outer());
  }
  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_server_type() != 0) {
    _internal_set_server_type(from._internal_server_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sd_conn_attr::CopyFrom(const sd_conn_attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.sd_conn_attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sd_conn_attr::IsInitialized() const {
  return true;
}

void sd_conn_attr::InternalSwap(sd_conn_attr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_type_str_, GetArenaForAllocation(),
      &other->server_type_str_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inter_, GetArenaForAllocation(),
      &other->inter_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &outer_, GetArenaForAllocation(),
      &other->outer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sd_conn_attr, server_type_)
      + sizeof(sd_conn_attr::server_type_)
      - PROTOBUF_FIELD_OFFSET(sd_conn_attr, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sd_conn_attr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[6]);
}

// ===================================================================

class service_discovery::_Internal {
 public:
};

service_discovery::service_discovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  conn_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.service_discovery)
}
service_discovery::service_discovery(const service_discovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conn_list_(from.conn_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_inter_listen().empty()) {
    s2s_inter_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2s_inter_listen(), 
      GetArenaForAllocation());
  }
  s2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_outer_listen().empty()) {
    s2s_outer_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2s_outer_listen(), 
      GetArenaForAllocation());
  }
  s2s_http_surl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_http_surl().empty()) {
    s2s_http_surl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2s_http_surl(), 
      GetArenaForAllocation());
  }
  s2s_http_curl1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_http_curl1().empty()) {
    s2s_http_curl1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2s_http_curl1(), 
      GetArenaForAllocation());
  }
  s2s_http_curl2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s2s_http_curl2().empty()) {
    s2s_http_curl2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s2s_http_curl2(), 
      GetArenaForAllocation());
  }
  c2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_inter_listen().empty()) {
    c2s_inter_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c2s_inter_listen(), 
      GetArenaForAllocation());
  }
  c2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_outer_listen().empty()) {
    c2s_outer_listen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c2s_outer_listen(), 
      GetArenaForAllocation());
  }
  c2s_https_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_https_url().empty()) {
    c2s_https_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c2s_https_url(), 
      GetArenaForAllocation());
  }
  c2s_https_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_https_cert().empty()) {
    c2s_https_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c2s_https_cert(), 
      GetArenaForAllocation());
  }
  c2s_https_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_c2s_https_key().empty()) {
    c2s_https_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_c2s_https_key(), 
      GetArenaForAllocation());
  }
  sdk_tcp_inter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_tcp_inter().empty()) {
    sdk_tcp_inter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_tcp_inter(), 
      GetArenaForAllocation());
  }
  sdk_tcp_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_tcp_out().empty()) {
    sdk_tcp_out_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_tcp_out(), 
      GetArenaForAllocation());
  }
  sdk_https_urtl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_https_urtl().empty()) {
    sdk_https_urtl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_https_urtl(), 
      GetArenaForAllocation());
  }
  sdk_https_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_https_cert().empty()) {
    sdk_https_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_https_cert(), 
      GetArenaForAllocation());
  }
  sdk_https_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_https_key().empty()) {
    sdk_https_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_https_key(), 
      GetArenaForAllocation());
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:pb.service_discovery)
}

inline void service_discovery::SharedCtor() {
s2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
s2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
s2s_http_surl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
s2s_http_curl1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
s2s_http_curl2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c2s_inter_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c2s_outer_listen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c2s_https_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c2s_https_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
c2s_https_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_tcp_inter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_tcp_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_https_urtl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_https_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_https_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_id_ = uint64_t{0u};
}

service_discovery::~service_discovery() {
  // @@protoc_insertion_point(destructor:pb.service_discovery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void service_discovery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  s2s_inter_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_outer_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_http_surl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_http_curl1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s2s_http_curl2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_inter_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_outer_listen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c2s_https_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_tcp_inter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_tcp_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_https_urtl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_https_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_https_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void service_discovery::ArenaDtor(void* object) {
  service_discovery* _this = reinterpret_cast< service_discovery* >(object);
  (void)_this;
}
void service_discovery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void service_discovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void service_discovery::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.service_discovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conn_list_.Clear();
  s2s_inter_listen_.ClearToEmpty();
  s2s_outer_listen_.ClearToEmpty();
  s2s_http_surl_.ClearToEmpty();
  s2s_http_curl1_.ClearToEmpty();
  s2s_http_curl2_.ClearToEmpty();
  c2s_inter_listen_.ClearToEmpty();
  c2s_outer_listen_.ClearToEmpty();
  c2s_https_url_.ClearToEmpty();
  c2s_https_cert_.ClearToEmpty();
  c2s_https_key_.ClearToEmpty();
  sdk_tcp_inter_.ClearToEmpty();
  sdk_tcp_out_.ClearToEmpty();
  sdk_https_urtl_.ClearToEmpty();
  sdk_https_cert_.ClearToEmpty();
  sdk_https_key_.ClearToEmpty();
  server_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* service_discovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_inter_listen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_s2s_inter_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_inter_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_outer_listen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_s2s_outer_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_outer_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_http_surl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_s2s_http_surl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_http_surl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_http_curl1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_s2s_http_curl1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_http_curl1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string s2s_http_curl2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_s2s_http_curl2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.s2s_http_curl2"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.sd_conn_attr conn_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conn_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string c2s_inter_listen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_c2s_inter_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_inter_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_outer_listen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_c2s_outer_listen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_outer_listen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_https_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_c2s_https_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_https_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_https_cert = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_c2s_https_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_https_cert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string c2s_https_key = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_c2s_https_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.c2s_https_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_tcp_inter = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_sdk_tcp_inter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.sdk_tcp_inter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_tcp_out = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_sdk_tcp_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.sdk_tcp_out"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_https_urtl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_sdk_https_urtl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.sdk_https_urtl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_https_cert = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_sdk_https_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.sdk_https_cert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdk_https_key = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_sdk_https_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery.sdk_https_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* service_discovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.service_discovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // string s2s_inter_listen = 2;
  if (!this->_internal_s2s_inter_listen().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_inter_listen().data(), static_cast<int>(this->_internal_s2s_inter_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_inter_listen");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_s2s_inter_listen(), target);
  }

  // string s2s_outer_listen = 3;
  if (!this->_internal_s2s_outer_listen().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_outer_listen().data(), static_cast<int>(this->_internal_s2s_outer_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_outer_listen");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_s2s_outer_listen(), target);
  }

  // string s2s_http_surl = 4;
  if (!this->_internal_s2s_http_surl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_http_surl().data(), static_cast<int>(this->_internal_s2s_http_surl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_http_surl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_s2s_http_surl(), target);
  }

  // string s2s_http_curl1 = 5;
  if (!this->_internal_s2s_http_curl1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_http_curl1().data(), static_cast<int>(this->_internal_s2s_http_curl1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_http_curl1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s2s_http_curl1(), target);
  }

  // string s2s_http_curl2 = 6;
  if (!this->_internal_s2s_http_curl2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s2s_http_curl2().data(), static_cast<int>(this->_internal_s2s_http_curl2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.s2s_http_curl2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_s2s_http_curl2(), target);
  }

  // repeated .pb.sd_conn_attr conn_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conn_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_conn_list(i), target, stream);
  }

  // string c2s_inter_listen = 8;
  if (!this->_internal_c2s_inter_listen().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_inter_listen().data(), static_cast<int>(this->_internal_c2s_inter_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_inter_listen");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_c2s_inter_listen(), target);
  }

  // string c2s_outer_listen = 9;
  if (!this->_internal_c2s_outer_listen().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_outer_listen().data(), static_cast<int>(this->_internal_c2s_outer_listen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_outer_listen");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_c2s_outer_listen(), target);
  }

  // string c2s_https_url = 10;
  if (!this->_internal_c2s_https_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_https_url().data(), static_cast<int>(this->_internal_c2s_https_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_https_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_c2s_https_url(), target);
  }

  // string c2s_https_cert = 11;
  if (!this->_internal_c2s_https_cert().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_https_cert().data(), static_cast<int>(this->_internal_c2s_https_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_https_cert");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_c2s_https_cert(), target);
  }

  // string c2s_https_key = 12;
  if (!this->_internal_c2s_https_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c2s_https_key().data(), static_cast<int>(this->_internal_c2s_https_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.c2s_https_key");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_c2s_https_key(), target);
  }

  // string sdk_tcp_inter = 13;
  if (!this->_internal_sdk_tcp_inter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_tcp_inter().data(), static_cast<int>(this->_internal_sdk_tcp_inter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.sdk_tcp_inter");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_sdk_tcp_inter(), target);
  }

  // string sdk_tcp_out = 14;
  if (!this->_internal_sdk_tcp_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_tcp_out().data(), static_cast<int>(this->_internal_sdk_tcp_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.sdk_tcp_out");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_sdk_tcp_out(), target);
  }

  // string sdk_https_urtl = 15;
  if (!this->_internal_sdk_https_urtl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_https_urtl().data(), static_cast<int>(this->_internal_sdk_https_urtl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.sdk_https_urtl");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sdk_https_urtl(), target);
  }

  // string sdk_https_cert = 16;
  if (!this->_internal_sdk_https_cert().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_https_cert().data(), static_cast<int>(this->_internal_sdk_https_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.sdk_https_cert");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_sdk_https_cert(), target);
  }

  // string sdk_https_key = 17;
  if (!this->_internal_sdk_https_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdk_https_key().data(), static_cast<int>(this->_internal_sdk_https_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery.sdk_https_key");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_sdk_https_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.service_discovery)
  return target;
}

size_t service_discovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.service_discovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.sd_conn_attr conn_list = 7;
  total_size += 1UL * this->_internal_conn_list_size();
  for (const auto& msg : this->conn_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string s2s_inter_listen = 2;
  if (!this->_internal_s2s_inter_listen().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_inter_listen());
  }

  // string s2s_outer_listen = 3;
  if (!this->_internal_s2s_outer_listen().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_outer_listen());
  }

  // string s2s_http_surl = 4;
  if (!this->_internal_s2s_http_surl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_http_surl());
  }

  // string s2s_http_curl1 = 5;
  if (!this->_internal_s2s_http_curl1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_http_curl1());
  }

  // string s2s_http_curl2 = 6;
  if (!this->_internal_s2s_http_curl2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s2s_http_curl2());
  }

  // string c2s_inter_listen = 8;
  if (!this->_internal_c2s_inter_listen().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_inter_listen());
  }

  // string c2s_outer_listen = 9;
  if (!this->_internal_c2s_outer_listen().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_outer_listen());
  }

  // string c2s_https_url = 10;
  if (!this->_internal_c2s_https_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_https_url());
  }

  // string c2s_https_cert = 11;
  if (!this->_internal_c2s_https_cert().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_https_cert());
  }

  // string c2s_https_key = 12;
  if (!this->_internal_c2s_https_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c2s_https_key());
  }

  // string sdk_tcp_inter = 13;
  if (!this->_internal_sdk_tcp_inter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_tcp_inter());
  }

  // string sdk_tcp_out = 14;
  if (!this->_internal_sdk_tcp_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_tcp_out());
  }

  // string sdk_https_urtl = 15;
  if (!this->_internal_sdk_https_urtl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_https_urtl());
  }

  // string sdk_https_cert = 16;
  if (!this->_internal_sdk_https_cert().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_https_cert());
  }

  // string sdk_https_key = 17;
  if (!this->_internal_sdk_https_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdk_https_key());
  }

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData service_discovery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    service_discovery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*service_discovery::GetClassData() const { return &_class_data_; }

void service_discovery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<service_discovery *>(to)->MergeFrom(
      static_cast<const service_discovery &>(from));
}


void service_discovery::MergeFrom(const service_discovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.service_discovery)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conn_list_.MergeFrom(from.conn_list_);
  if (!from._internal_s2s_inter_listen().empty()) {
    _internal_set_s2s_inter_listen(from._internal_s2s_inter_listen());
  }
  if (!from._internal_s2s_outer_listen().empty()) {
    _internal_set_s2s_outer_listen(from._internal_s2s_outer_listen());
  }
  if (!from._internal_s2s_http_surl().empty()) {
    _internal_set_s2s_http_surl(from._internal_s2s_http_surl());
  }
  if (!from._internal_s2s_http_curl1().empty()) {
    _internal_set_s2s_http_curl1(from._internal_s2s_http_curl1());
  }
  if (!from._internal_s2s_http_curl2().empty()) {
    _internal_set_s2s_http_curl2(from._internal_s2s_http_curl2());
  }
  if (!from._internal_c2s_inter_listen().empty()) {
    _internal_set_c2s_inter_listen(from._internal_c2s_inter_listen());
  }
  if (!from._internal_c2s_outer_listen().empty()) {
    _internal_set_c2s_outer_listen(from._internal_c2s_outer_listen());
  }
  if (!from._internal_c2s_https_url().empty()) {
    _internal_set_c2s_https_url(from._internal_c2s_https_url());
  }
  if (!from._internal_c2s_https_cert().empty()) {
    _internal_set_c2s_https_cert(from._internal_c2s_https_cert());
  }
  if (!from._internal_c2s_https_key().empty()) {
    _internal_set_c2s_https_key(from._internal_c2s_https_key());
  }
  if (!from._internal_sdk_tcp_inter().empty()) {
    _internal_set_sdk_tcp_inter(from._internal_sdk_tcp_inter());
  }
  if (!from._internal_sdk_tcp_out().empty()) {
    _internal_set_sdk_tcp_out(from._internal_sdk_tcp_out());
  }
  if (!from._internal_sdk_https_urtl().empty()) {
    _internal_set_sdk_https_urtl(from._internal_sdk_https_urtl());
  }
  if (!from._internal_sdk_https_cert().empty()) {
    _internal_set_sdk_https_cert(from._internal_sdk_https_cert());
  }
  if (!from._internal_sdk_https_key().empty()) {
    _internal_set_sdk_https_key(from._internal_sdk_https_key());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void service_discovery::CopyFrom(const service_discovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.service_discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_discovery::IsInitialized() const {
  return true;
}

void service_discovery::InternalSwap(service_discovery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  conn_list_.InternalSwap(&other->conn_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s2s_inter_listen_, GetArenaForAllocation(),
      &other->s2s_inter_listen_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s2s_outer_listen_, GetArenaForAllocation(),
      &other->s2s_outer_listen_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s2s_http_surl_, GetArenaForAllocation(),
      &other->s2s_http_surl_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s2s_http_curl1_, GetArenaForAllocation(),
      &other->s2s_http_curl1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &s2s_http_curl2_, GetArenaForAllocation(),
      &other->s2s_http_curl2_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c2s_inter_listen_, GetArenaForAllocation(),
      &other->c2s_inter_listen_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c2s_outer_listen_, GetArenaForAllocation(),
      &other->c2s_outer_listen_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c2s_https_url_, GetArenaForAllocation(),
      &other->c2s_https_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c2s_https_cert_, GetArenaForAllocation(),
      &other->c2s_https_cert_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &c2s_https_key_, GetArenaForAllocation(),
      &other->c2s_https_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_tcp_inter_, GetArenaForAllocation(),
      &other->sdk_tcp_inter_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_tcp_out_, GetArenaForAllocation(),
      &other->sdk_tcp_out_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_https_urtl_, GetArenaForAllocation(),
      &other->sdk_https_urtl_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_https_cert_, GetArenaForAllocation(),
      &other->sdk_https_cert_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_https_key_, GetArenaForAllocation(),
      &other->sdk_https_key_, other->GetArenaForAllocation()
  );
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata service_discovery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[7]);
}

// ===================================================================

class service_discovery_req::_Internal {
 public:
};

service_discovery_req::service_discovery_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.service_discovery_req)
}
service_discovery_req::service_discovery_req(const service_discovery_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:pb.service_discovery_req)
}

inline void service_discovery_req::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_id_ = uint64_t{0u};
}

service_discovery_req::~service_discovery_req() {
  // @@protoc_insertion_point(destructor:pb.service_discovery_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void service_discovery_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void service_discovery_req::ArenaDtor(void* object) {
  service_discovery_req* _this = reinterpret_cast< service_discovery_req* >(object);
  (void)_this;
}
void service_discovery_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void service_discovery_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void service_discovery_req::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.service_discovery_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  server_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* service_discovery_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.service_discovery_req.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* service_discovery_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.service_discovery_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_server_id(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.service_discovery_req.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.service_discovery_req)
  return target;
}

size_t service_discovery_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.service_discovery_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // uint64 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData service_discovery_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    service_discovery_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*service_discovery_req::GetClassData() const { return &_class_data_; }

void service_discovery_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<service_discovery_req *>(to)->MergeFrom(
      static_cast<const service_discovery_req &>(from));
}


void service_discovery_req::MergeFrom(const service_discovery_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.service_discovery_req)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void service_discovery_req::CopyFrom(const service_discovery_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.service_discovery_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_discovery_req::IsInitialized() const {
  return true;
}

void service_discovery_req::InternalSwap(service_discovery_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata service_discovery_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[8]);
}

// ===================================================================

class service_discovery_ack::_Internal {
 public:
  static const ::pb::service_discovery& sd_info(const service_discovery_ack* msg);
};

const ::pb::service_discovery&
service_discovery_ack::_Internal::sd_info(const service_discovery_ack* msg) {
  return *msg->sd_info_;
}
service_discovery_ack::service_discovery_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pb.service_discovery_ack)
}
service_discovery_ack::service_discovery_ack(const service_discovery_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sd_info()) {
    sd_info_ = new ::pb::service_discovery(*from.sd_info_);
  } else {
    sd_info_ = nullptr;
  }
  ::memcpy(&rebuild_flag_, &from.rebuild_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&verify_flag_) -
    reinterpret_cast<char*>(&rebuild_flag_)) + sizeof(verify_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.service_discovery_ack)
}

inline void service_discovery_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sd_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&verify_flag_) -
    reinterpret_cast<char*>(&sd_info_)) + sizeof(verify_flag_));
}

service_discovery_ack::~service_discovery_ack() {
  // @@protoc_insertion_point(destructor:pb.service_discovery_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void service_discovery_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sd_info_;
}

void service_discovery_ack::ArenaDtor(void* object) {
  service_discovery_ack* _this = reinterpret_cast< service_discovery_ack* >(object);
  (void)_this;
}
void service_discovery_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void service_discovery_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void service_discovery_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.service_discovery_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sd_info_ != nullptr) {
    delete sd_info_;
  }
  sd_info_ = nullptr;
  ::memset(&rebuild_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_flag_) -
      reinterpret_cast<char*>(&rebuild_flag_)) + sizeof(verify_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* service_discovery_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool rebuild_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rebuild_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.service_discovery sd_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sd_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* service_discovery_ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.service_discovery_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rebuild_flag = 1;
  if (this->_internal_rebuild_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rebuild_flag(), target);
  }

  // bool verify_flag = 2;
  if (this->_internal_verify_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verify_flag(), target);
  }

  // .pb.service_discovery sd_info = 3;
  if (this->_internal_has_sd_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sd_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.service_discovery_ack)
  return target;
}

size_t service_discovery_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.service_discovery_ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.service_discovery sd_info = 3;
  if (this->_internal_has_sd_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sd_info_);
  }

  // bool rebuild_flag = 1;
  if (this->_internal_rebuild_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool verify_flag = 2;
  if (this->_internal_verify_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData service_discovery_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    service_discovery_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*service_discovery_ack::GetClassData() const { return &_class_data_; }

void service_discovery_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<service_discovery_ack *>(to)->MergeFrom(
      static_cast<const service_discovery_ack &>(from));
}


void service_discovery_ack::MergeFrom(const service_discovery_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.service_discovery_ack)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sd_info()) {
    _internal_mutable_sd_info()->::pb::service_discovery::MergeFrom(from._internal_sd_info());
  }
  if (from._internal_rebuild_flag() != 0) {
    _internal_set_rebuild_flag(from._internal_rebuild_flag());
  }
  if (from._internal_verify_flag() != 0) {
    _internal_set_verify_flag(from._internal_verify_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void service_discovery_ack::CopyFrom(const service_discovery_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.service_discovery_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_discovery_ack::IsInitialized() const {
  return true;
}

void service_discovery_ack::InternalSwap(service_discovery_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(service_discovery_ack, verify_flag_)
      + sizeof(service_discovery_ack::verify_flag_)
      - PROTOBUF_FIELD_OFFSET(service_discovery_ack, sd_info_)>(
          reinterpret_cast<char*>(&sd_info_),
          reinterpret_cast<char*>(&other->sd_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata service_discovery_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ss_5fbase_2eproto_getter, &descriptor_table_ss_5fbase_2eproto_once,
      file_level_metadata_ss_5fbase_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_veriry_req* Arena::CreateMaybeMessage< ::pb::s2s_server_session_veriry_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::s2s_server_session_veriry_req >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_veriry_ack* Arena::CreateMaybeMessage< ::pb::s2s_server_session_veriry_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::s2s_server_session_veriry_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_ping* Arena::CreateMaybeMessage< ::pb::s2s_server_session_ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::s2s_server_session_ping >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_server_session_pong* Arena::CreateMaybeMessage< ::pb::s2s_server_session_pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::s2s_server_session_pong >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_client_session_ping* Arena::CreateMaybeMessage< ::pb::s2s_client_session_ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::s2s_client_session_ping >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::s2s_client_session_pong* Arena::CreateMaybeMessage< ::pb::s2s_client_session_pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::s2s_client_session_pong >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::sd_conn_attr* Arena::CreateMaybeMessage< ::pb::sd_conn_attr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::sd_conn_attr >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::service_discovery* Arena::CreateMaybeMessage< ::pb::service_discovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::service_discovery >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::service_discovery_req* Arena::CreateMaybeMessage< ::pb::service_discovery_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::service_discovery_req >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::service_discovery_ack* Arena::CreateMaybeMessage< ::pb::service_discovery_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::service_discovery_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
